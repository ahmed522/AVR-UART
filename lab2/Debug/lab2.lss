
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000023b6  0000244a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080008e  0080008e  00002478  2**0
                  ALLOC
  3 .stab         00001a1c  00000000  00000000  00002478  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b3b  00000000  00000000  00003e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000049cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000068c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000077b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008560  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000086c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000894d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000911b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 32 11 	call	0x2264	; 0x2264 <main>
      8a:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e8       	ldi	r26, 0x86	; 134
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 85 11 	jmp	0x230a	; 0x230a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 85 11 	jmp	0x230a	; 0x230a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e8       	ldi	r24, 0x86	; 134
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 85 11 	jmp	0x230a	; 0x230a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 85 11 	jmp	0x230a	; 0x230a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 85 11 	jmp	0x230a	; 0x230a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6d 11 	jmp	0x22da	; 0x22da <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
/*---------------------------------------------------------------------------------*
 *                                FUNCTION DEFINITIONS                             *
 *---------------------------------------------------------------------------------*/

void UART_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*-------------------------------------UCSRA-------------------------------------*/
	/* Enable double speed */
	SET_BIT(UCSRA,U2X);
     b4e:	ab e2       	ldi	r26, 0x2B	; 43
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	eb e2       	ldi	r30, 0x2B	; 43
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	82 60       	ori	r24, 0x02	; 2
     b5a:	8c 93       	st	X, r24

	/*-------------------------------------UCSRB-------------------------------------*/
	/* Enable reciving and transmitting */
	SET_BIT(UCSRB,RXEN);
     b5c:	aa e2       	ldi	r26, 0x2A	; 42
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ea e2       	ldi	r30, 0x2A	; 42
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 61       	ori	r24, 0x10	; 16
     b68:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
     b6a:	aa e2       	ldi	r26, 0x2A	; 42
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ea e2       	ldi	r30, 0x2A	; 42
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	8c 93       	st	X, r24

	/*-------------------------------------UCSRC-------------------------------------*/
	/* Enable writing to UCSRC register */
	SET_BIT(UCSRC,URSEL);
     b78:	a0 e4       	ldi	r26, 0x40	; 64
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e0 e4       	ldi	r30, 0x40	; 64
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 68       	ori	r24, 0x80	; 128
     b84:	8c 93       	st	X, r24
	 *					  0           1            1             8-bit
	 *					  1           1            1             9-bit
	 *
	 *----------------------------------------------------------------------------*/
	/* 8-bit */
	SET_BIT(UCSRC,UCSZ0);
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e0 e4       	ldi	r30, 0x40	; 64
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ1);
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24

	/* Baudrate prescaler */
	UBRRH = (BAUDRATE_PRESCALER>>8);
     ba2:	e0 e4       	ldi	r30, 0x40	; 64
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	10 82       	st	Z, r1
    UBRRL = BAUDRATE_PRESCALER;
     ba8:	e9 e2       	ldi	r30, 0x29	; 41
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	8c e0       	ldi	r24, 0x0C	; 12
     bae:	80 83       	st	Z, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <UART_send_Byte>:
void UART_send_Byte(const uint8 data)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01
	/* wait until transmitter buffer register is empty */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
     bc2:	eb e2       	ldi	r30, 0x2B	; 43
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	80 72       	andi	r24, 0x20	; 32
     bce:	90 70       	andi	r25, 0x00	; 0
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	b9 f3       	breq	.-18     	; 0xbc2 <UART_send_Byte+0xc>
	/* Send data */
	UDR=data;
     bd4:	ec e2       	ldi	r30, 0x2C	; 44
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	80 83       	st	Z, r24

}
     bdc:	0f 90       	pop	r0
     bde:	cf 91       	pop	r28
     be0:	df 91       	pop	r29
     be2:	08 95       	ret

00000be4 <UART_recieve_Byte>:
uint8 UART_recieve_Byte()
{
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
     bec:	eb e2       	ldi	r30, 0x2B	; 43
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	88 23       	and	r24, r24
     bf4:	dc f7       	brge	.-10     	; 0xbec <UART_recieve_Byte+0x8>
    return UDR;
     bf6:	ec e2       	ldi	r30, 0x2C	; 44
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
}
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	08 95       	ret

00000c02 <UART_send_String>:
void UART_send_String(const uint8* str)
{
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	6f 97       	sbiw	r28, 0x1f	; 31
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	9f 8f       	std	Y+31, r25	; 0x1f
     c18:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i = 0;
     c1a:	1d 8e       	std	Y+29, r1	; 0x1d
     c1c:	80 c0       	rjmp	.+256    	; 0xd1e <UART_send_String+0x11c>
	while(str[i] != '\0')
	{
		UART_send_Byte(str[i]);
     c1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c26:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c28:	fc 01       	movw	r30, r24
     c2a:	e2 0f       	add	r30, r18
     c2c:	f3 1f       	adc	r31, r19
     c2e:	80 81       	ld	r24, Z
     c30:	0e 94 db 05 	call	0xbb6	; 0xbb6 <UART_send_Byte>
		i++;
     c34:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c36:	8f 5f       	subi	r24, 0xFF	; 255
     c38:	8d 8f       	std	Y+29, r24	; 0x1d
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	a0 ea       	ldi	r26, 0xA0	; 160
     c40:	b0 e4       	ldi	r27, 0x40	; 64
     c42:	89 8f       	std	Y+25, r24	; 0x19
     c44:	9a 8f       	std	Y+26, r25	; 0x1a
     c46:	ab 8f       	std	Y+27, r26	; 0x1b
     c48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4a:	69 8d       	ldd	r22, Y+25	; 0x19
     c4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c50:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	4a e7       	ldi	r20, 0x7A	; 122
     c58:	53 e4       	ldi	r21, 0x43	; 67
     c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	8d 8b       	std	Y+21, r24	; 0x15
     c64:	9e 8b       	std	Y+22, r25	; 0x16
     c66:	af 8b       	std	Y+23, r26	; 0x17
     c68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c6a:	6d 89       	ldd	r22, Y+21	; 0x15
     c6c:	7e 89       	ldd	r23, Y+22	; 0x16
     c6e:	8f 89       	ldd	r24, Y+23	; 0x17
     c70:	98 8d       	ldd	r25, Y+24	; 0x18
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e8       	ldi	r20, 0x80	; 128
     c78:	5f e3       	ldi	r21, 0x3F	; 63
     c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c7e:	88 23       	and	r24, r24
     c80:	2c f4       	brge	.+10     	; 0xc8c <UART_send_String+0x8a>
		__ticks = 1;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	9c 8b       	std	Y+20, r25	; 0x14
     c88:	8b 8b       	std	Y+19, r24	; 0x13
     c8a:	3f c0       	rjmp	.+126    	; 0xd0a <UART_send_String+0x108>
	else if (__tmp > 65535)
     c8c:	6d 89       	ldd	r22, Y+21	; 0x15
     c8e:	7e 89       	ldd	r23, Y+22	; 0x16
     c90:	8f 89       	ldd	r24, Y+23	; 0x17
     c92:	98 8d       	ldd	r25, Y+24	; 0x18
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	3f ef       	ldi	r19, 0xFF	; 255
     c98:	4f e7       	ldi	r20, 0x7F	; 127
     c9a:	57 e4       	ldi	r21, 0x47	; 71
     c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ca0:	18 16       	cp	r1, r24
     ca2:	4c f5       	brge	.+82     	; 0xcf6 <UART_send_String+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca4:	69 8d       	ldd	r22, Y+25	; 0x19
     ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	40 e2       	ldi	r20, 0x20	; 32
     cb2:	51 e4       	ldi	r21, 0x41	; 65
     cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	bc 01       	movw	r22, r24
     cbe:	cd 01       	movw	r24, r26
     cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc4:	dc 01       	movw	r26, r24
     cc6:	cb 01       	movw	r24, r22
     cc8:	9c 8b       	std	Y+20, r25	; 0x14
     cca:	8b 8b       	std	Y+19, r24	; 0x13
     ccc:	0f c0       	rjmp	.+30     	; 0xcec <UART_send_String+0xea>
     cce:	89 e1       	ldi	r24, 0x19	; 25
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	9a 8b       	std	Y+18, r25	; 0x12
     cd4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cd6:	89 89       	ldd	r24, Y+17	; 0x11
     cd8:	9a 89       	ldd	r25, Y+18	; 0x12
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <UART_send_String+0xd8>
     cde:	9a 8b       	std	Y+18, r25	; 0x12
     ce0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce2:	8b 89       	ldd	r24, Y+19	; 0x13
     ce4:	9c 89       	ldd	r25, Y+20	; 0x14
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	9c 8b       	std	Y+20, r25	; 0x14
     cea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cec:	8b 89       	ldd	r24, Y+19	; 0x13
     cee:	9c 89       	ldd	r25, Y+20	; 0x14
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	69 f7       	brne	.-38     	; 0xcce <UART_send_String+0xcc>
     cf4:	14 c0       	rjmp	.+40     	; 0xd1e <UART_send_String+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf6:	6d 89       	ldd	r22, Y+21	; 0x15
     cf8:	7e 89       	ldd	r23, Y+22	; 0x16
     cfa:	8f 89       	ldd	r24, Y+23	; 0x17
     cfc:	98 8d       	ldd	r25, Y+24	; 0x18
     cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	9c 8b       	std	Y+20, r25	; 0x14
     d08:	8b 8b       	std	Y+19, r24	; 0x13
     d0a:	8b 89       	ldd	r24, Y+19	; 0x13
     d0c:	9c 89       	ldd	r25, Y+20	; 0x14
     d0e:	98 8b       	std	Y+16, r25	; 0x10
     d10:	8f 87       	std	Y+15, r24	; 0x0f
     d12:	8f 85       	ldd	r24, Y+15	; 0x0f
     d14:	98 89       	ldd	r25, Y+16	; 0x10
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	f1 f7       	brne	.-4      	; 0xd16 <UART_send_String+0x114>
     d1a:	98 8b       	std	Y+16, r25	; 0x10
     d1c:	8f 87       	std	Y+15, r24	; 0x0f
    return UDR;
}
void UART_send_String(const uint8* str)
{
	uint8 i = 0;
	while(str[i] != '\0')
     d1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d26:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d28:	fc 01       	movw	r30, r24
     d2a:	e2 0f       	add	r30, r18
     d2c:	f3 1f       	adc	r31, r19
     d2e:	80 81       	ld	r24, Z
     d30:	88 23       	and	r24, r24
     d32:	09 f0       	breq	.+2      	; 0xd36 <UART_send_String+0x134>
     d34:	74 cf       	rjmp	.-280    	; 0xc1e <UART_send_String+0x1c>
	{
		UART_send_Byte(str[i]);
		i++;
		_delay_ms(5);
	}
	UART_send_Byte(END_STRING_SYMBOL);
     d36:	83 e2       	ldi	r24, 0x23	; 35
     d38:	0e 94 db 05 	call	0xbb6	; 0xbb6 <UART_send_Byte>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	a0 ea       	ldi	r26, 0xA0	; 160
     d42:	b0 e4       	ldi	r27, 0x40	; 64
     d44:	8b 87       	std	Y+11, r24	; 0x0b
     d46:	9c 87       	std	Y+12, r25	; 0x0c
     d48:	ad 87       	std	Y+13, r26	; 0x0d
     d4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d50:	8d 85       	ldd	r24, Y+13	; 0x0d
     d52:	9e 85       	ldd	r25, Y+14	; 0x0e
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	4a e7       	ldi	r20, 0x7A	; 122
     d5a:	53 e4       	ldi	r21, 0x43	; 67
     d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	8f 83       	std	Y+7, r24	; 0x07
     d66:	98 87       	std	Y+8, r25	; 0x08
     d68:	a9 87       	std	Y+9, r26	; 0x09
     d6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d6c:	6f 81       	ldd	r22, Y+7	; 0x07
     d6e:	78 85       	ldd	r23, Y+8	; 0x08
     d70:	89 85       	ldd	r24, Y+9	; 0x09
     d72:	9a 85       	ldd	r25, Y+10	; 0x0a
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e8       	ldi	r20, 0x80	; 128
     d7a:	5f e3       	ldi	r21, 0x3F	; 63
     d7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d80:	88 23       	and	r24, r24
     d82:	2c f4       	brge	.+10     	; 0xd8e <UART_send_String+0x18c>
		__ticks = 1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	9e 83       	std	Y+6, r25	; 0x06
     d8a:	8d 83       	std	Y+5, r24	; 0x05
     d8c:	3f c0       	rjmp	.+126    	; 0xe0c <UART_send_String+0x20a>
	else if (__tmp > 65535)
     d8e:	6f 81       	ldd	r22, Y+7	; 0x07
     d90:	78 85       	ldd	r23, Y+8	; 0x08
     d92:	89 85       	ldd	r24, Y+9	; 0x09
     d94:	9a 85       	ldd	r25, Y+10	; 0x0a
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	3f ef       	ldi	r19, 0xFF	; 255
     d9a:	4f e7       	ldi	r20, 0x7F	; 127
     d9c:	57 e4       	ldi	r21, 0x47	; 71
     d9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da2:	18 16       	cp	r1, r24
     da4:	4c f5       	brge	.+82     	; 0xdf8 <UART_send_String+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da6:	6b 85       	ldd	r22, Y+11	; 0x0b
     da8:	7c 85       	ldd	r23, Y+12	; 0x0c
     daa:	8d 85       	ldd	r24, Y+13	; 0x0d
     dac:	9e 85       	ldd	r25, Y+14	; 0x0e
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e2       	ldi	r20, 0x20	; 32
     db4:	51 e4       	ldi	r21, 0x41	; 65
     db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	bc 01       	movw	r22, r24
     dc0:	cd 01       	movw	r24, r26
     dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	9e 83       	std	Y+6, r25	; 0x06
     dcc:	8d 83       	std	Y+5, r24	; 0x05
     dce:	0f c0       	rjmp	.+30     	; 0xdee <UART_send_String+0x1ec>
     dd0:	89 e1       	ldi	r24, 0x19	; 25
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	9c 83       	std	Y+4, r25	; 0x04
     dd6:	8b 83       	std	Y+3, r24	; 0x03
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	9c 81       	ldd	r25, Y+4	; 0x04
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <UART_send_String+0x1da>
     de0:	9c 83       	std	Y+4, r25	; 0x04
     de2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de4:	8d 81       	ldd	r24, Y+5	; 0x05
     de6:	9e 81       	ldd	r25, Y+6	; 0x06
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	9e 83       	std	Y+6, r25	; 0x06
     dec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dee:	8d 81       	ldd	r24, Y+5	; 0x05
     df0:	9e 81       	ldd	r25, Y+6	; 0x06
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	69 f7       	brne	.-38     	; 0xdd0 <UART_send_String+0x1ce>
     df6:	14 c0       	rjmp	.+40     	; 0xe20 <UART_send_String+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df8:	6f 81       	ldd	r22, Y+7	; 0x07
     dfa:	78 85       	ldd	r23, Y+8	; 0x08
     dfc:	89 85       	ldd	r24, Y+9	; 0x09
     dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	9e 83       	std	Y+6, r25	; 0x06
     e0a:	8d 83       	std	Y+5, r24	; 0x05
     e0c:	8d 81       	ldd	r24, Y+5	; 0x05
     e0e:	9e 81       	ldd	r25, Y+6	; 0x06
     e10:	9a 83       	std	Y+2, r25	; 0x02
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	9a 81       	ldd	r25, Y+2	; 0x02
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <UART_send_String+0x216>
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
     e20:	6f 96       	adiw	r28, 0x1f	; 31
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <UART_recieve_String>:
void UART_recieve_String(uint8* str)
{
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	61 97       	sbiw	r28, 0x11	; 17
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	99 8b       	std	Y+17, r25	; 0x11
     e4c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;
     e4e:	1f 86       	std	Y+15, r1	; 0x0f
	str[i] = UART_recieve_Byte();
     e50:	8f 85       	ldd	r24, Y+15	; 0x0f
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	88 89       	ldd	r24, Y+16	; 0x10
     e58:	99 89       	ldd	r25, Y+17	; 0x11
     e5a:	8c 01       	movw	r16, r24
     e5c:	02 0f       	add	r16, r18
     e5e:	13 1f       	adc	r17, r19
     e60:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UART_recieve_Byte>
     e64:	f8 01       	movw	r30, r16
     e66:	80 83       	st	Z, r24
     e68:	81 c0       	rjmp	.+258    	; 0xf6c <UART_recieve_String+0x13a>
	while(str[i] != END_STRING_SYMBOL)
	{
		i++;
     e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6c:	8f 5f       	subi	r24, 0xFF	; 255
     e6e:	8f 87       	std	Y+15, r24	; 0x0f
		str[i] = UART_recieve_Byte();
     e70:	8f 85       	ldd	r24, Y+15	; 0x0f
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	88 89       	ldd	r24, Y+16	; 0x10
     e78:	99 89       	ldd	r25, Y+17	; 0x11
     e7a:	8c 01       	movw	r16, r24
     e7c:	02 0f       	add	r16, r18
     e7e:	13 1f       	adc	r17, r19
     e80:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UART_recieve_Byte>
     e84:	f8 01       	movw	r30, r16
     e86:	80 83       	st	Z, r24
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 ea       	ldi	r26, 0xA0	; 160
     e8e:	b0 e4       	ldi	r27, 0x40	; 64
     e90:	8b 87       	std	Y+11, r24	; 0x0b
     e92:	9c 87       	std	Y+12, r25	; 0x0c
     e94:	ad 87       	std	Y+13, r26	; 0x0d
     e96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e98:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	4a e7       	ldi	r20, 0x7A	; 122
     ea6:	53 e4       	ldi	r21, 0x43	; 67
     ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	8f 83       	std	Y+7, r24	; 0x07
     eb2:	98 87       	std	Y+8, r25	; 0x08
     eb4:	a9 87       	std	Y+9, r26	; 0x09
     eb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eb8:	6f 81       	ldd	r22, Y+7	; 0x07
     eba:	78 85       	ldd	r23, Y+8	; 0x08
     ebc:	89 85       	ldd	r24, Y+9	; 0x09
     ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e8       	ldi	r20, 0x80	; 128
     ec6:	5f e3       	ldi	r21, 0x3F	; 63
     ec8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ecc:	88 23       	and	r24, r24
     ece:	2c f4       	brge	.+10     	; 0xeda <UART_recieve_String+0xa8>
		__ticks = 1;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9e 83       	std	Y+6, r25	; 0x06
     ed6:	8d 83       	std	Y+5, r24	; 0x05
     ed8:	3f c0       	rjmp	.+126    	; 0xf58 <UART_recieve_String+0x126>
	else if (__tmp > 65535)
     eda:	6f 81       	ldd	r22, Y+7	; 0x07
     edc:	78 85       	ldd	r23, Y+8	; 0x08
     ede:	89 85       	ldd	r24, Y+9	; 0x09
     ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	3f ef       	ldi	r19, 0xFF	; 255
     ee6:	4f e7       	ldi	r20, 0x7F	; 127
     ee8:	57 e4       	ldi	r21, 0x47	; 71
     eea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eee:	18 16       	cp	r1, r24
     ef0:	4c f5       	brge	.+82     	; 0xf44 <UART_recieve_String+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	40 e2       	ldi	r20, 0x20	; 32
     f00:	51 e4       	ldi	r21, 0x41	; 65
     f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	bc 01       	movw	r22, r24
     f0c:	cd 01       	movw	r24, r26
     f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	9e 83       	std	Y+6, r25	; 0x06
     f18:	8d 83       	std	Y+5, r24	; 0x05
     f1a:	0f c0       	rjmp	.+30     	; 0xf3a <UART_recieve_String+0x108>
     f1c:	89 e1       	ldi	r24, 0x19	; 25
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	9c 83       	std	Y+4, r25	; 0x04
     f22:	8b 83       	std	Y+3, r24	; 0x03
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	9c 81       	ldd	r25, Y+4	; 0x04
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <UART_recieve_String+0xf6>
     f2c:	9c 83       	std	Y+4, r25	; 0x04
     f2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	69 f7       	brne	.-38     	; 0xf1c <UART_recieve_String+0xea>
     f42:	14 c0       	rjmp	.+40     	; 0xf6c <UART_recieve_String+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f44:	6f 81       	ldd	r22, Y+7	; 0x07
     f46:	78 85       	ldd	r23, Y+8	; 0x08
     f48:	89 85       	ldd	r24, Y+9	; 0x09
     f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	9e 83       	std	Y+6, r25	; 0x06
     f56:	8d 83       	std	Y+5, r24	; 0x05
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	9e 81       	ldd	r25, Y+6	; 0x06
     f5c:	9a 83       	std	Y+2, r25	; 0x02
     f5e:	89 83       	std	Y+1, r24	; 0x01
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <UART_recieve_String+0x132>
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
}
void UART_recieve_String(uint8* str)
{
	uint8 i = 0;
	str[i] = UART_recieve_Byte();
	while(str[i] != END_STRING_SYMBOL)
     f6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	88 89       	ldd	r24, Y+16	; 0x10
     f74:	99 89       	ldd	r25, Y+17	; 0x11
     f76:	fc 01       	movw	r30, r24
     f78:	e2 0f       	add	r30, r18
     f7a:	f3 1f       	adc	r31, r19
     f7c:	80 81       	ld	r24, Z
     f7e:	83 32       	cpi	r24, 0x23	; 35
     f80:	09 f0       	breq	.+2      	; 0xf84 <UART_recieve_String+0x152>
     f82:	73 cf       	rjmp	.-282    	; 0xe6a <UART_recieve_String+0x38>
	{
		i++;
		str[i] = UART_recieve_Byte();
		_delay_ms(5);
	}
	str[i] = '\0';
     f84:	8f 85       	ldd	r24, Y+15	; 0x0f
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	88 89       	ldd	r24, Y+16	; 0x10
     f8c:	99 89       	ldd	r25, Y+17	; 0x11
     f8e:	fc 01       	movw	r30, r24
     f90:	e2 0f       	add	r30, r18
     f92:	f3 1f       	adc	r31, r19
     f94:	10 82       	st	Z, r1
}
     f96:	61 96       	adiw	r28, 0x11	; 17
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	08 95       	ret

00000fac <LCD_init>:
 *              	          Functions Definitions                                *
 * 																				   *
 ***********************************************************************************/

void LCD_init(void)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1 << E) | (1 << RS); /* Configure the control pins(E,RS,RW) as output pins */
     fb4:	aa e3       	ldi	r26, 0x3A	; 58
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ea e3       	ldi	r30, 0x3A	; 58
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	86 60       	ori	r24, 0x06	; 6
     fc0:	8c 93       	st	X, r24

#if (MODE == 4)
	LCD_DATA_PORT_DIR |= (1 << D4) | (1 << D5) | (1 << D6) | (1 << D7); /* Configure the data port as output port */
     fc2:	aa e3       	ldi	r26, 0x3A	; 58
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	ea e3       	ldi	r30, 0x3A	; 58
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	88 67       	ori	r24, 0x78	; 120
     fce:	8c 93       	st	X, r24
	LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	0e 94 f7 07 	call	0xfee	; 0xfee <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_4_BIT_MODE); /* initialize LCD in 4-bit mode */
     fd6:	88 e2       	ldi	r24, 0x28	; 40
     fd8:	0e 94 f7 07 	call	0xfee	; 0xfee <LCD_sendCommand>
#elif (MODE == 8)
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
	LCD_sendCommand(TWO_LINE_LCD_8_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF); /* cursor off */
     fdc:	8c e0       	ldi	r24, 0x0C	; 12
     fde:	0e 94 f7 07 	call	0xfee	; 0xfee <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	0e 94 f7 07 	call	0xfee	; 0xfee <LCD_sendCommand>
}
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <LCD_sendCommand>:

/*---------------------------------------------------------------------------------*/

void LCD_sendCommand(uint8 command)
{
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	c3 56       	subi	r28, 0x63	; 99
     ffc:	d0 40       	sbci	r29, 0x00	; 0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	fe 01       	movw	r30, r28
    100a:	ed 59       	subi	r30, 0x9D	; 157
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1010:	ab e3       	ldi	r26, 0x3B	; 59
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	eb e3       	ldi	r30, 0x3B	; 59
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8d 7f       	andi	r24, 0xFD	; 253
    101c:	8c 93       	st	X, r24
    101e:	fe 01       	movw	r30, r28
    1020:	e1 5a       	subi	r30, 0xA1	; 161
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	a0 e8       	ldi	r26, 0x80	; 128
    102a:	bf e3       	ldi	r27, 0x3F	; 63
    102c:	80 83       	st	Z, r24
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	a2 83       	std	Z+2, r26	; 0x02
    1032:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1034:	8e 01       	movw	r16, r28
    1036:	05 5a       	subi	r16, 0xA5	; 165
    1038:	1f 4f       	sbci	r17, 0xFF	; 255
    103a:	fe 01       	movw	r30, r28
    103c:	e1 5a       	subi	r30, 0xA1	; 161
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	60 81       	ld	r22, Z
    1042:	71 81       	ldd	r23, Z+1	; 0x01
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	93 81       	ldd	r25, Z+3	; 0x03
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	4a e7       	ldi	r20, 0x7A	; 122
    104e:	53 e4       	ldi	r21, 0x43	; 67
    1050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	f8 01       	movw	r30, r16
    105a:	80 83       	st	Z, r24
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	a2 83       	std	Z+2, r26	; 0x02
    1060:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1062:	fe 01       	movw	r30, r28
    1064:	e5 5a       	subi	r30, 0xA5	; 165
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	60 81       	ld	r22, Z
    106a:	71 81       	ldd	r23, Z+1	; 0x01
    106c:	82 81       	ldd	r24, Z+2	; 0x02
    106e:	93 81       	ldd	r25, Z+3	; 0x03
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	40 e8       	ldi	r20, 0x80	; 128
    1076:	5f e3       	ldi	r21, 0x3F	; 63
    1078:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    107c:	88 23       	and	r24, r24
    107e:	44 f4       	brge	.+16     	; 0x1090 <LCD_sendCommand+0xa2>
		__ticks = 1;
    1080:	fe 01       	movw	r30, r28
    1082:	e7 5a       	subi	r30, 0xA7	; 167
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	91 83       	std	Z+1, r25	; 0x01
    108c:	80 83       	st	Z, r24
    108e:	64 c0       	rjmp	.+200    	; 0x1158 <LCD_sendCommand+0x16a>
	else if (__tmp > 65535)
    1090:	fe 01       	movw	r30, r28
    1092:	e5 5a       	subi	r30, 0xA5	; 165
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	60 81       	ld	r22, Z
    1098:	71 81       	ldd	r23, Z+1	; 0x01
    109a:	82 81       	ldd	r24, Z+2	; 0x02
    109c:	93 81       	ldd	r25, Z+3	; 0x03
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	3f ef       	ldi	r19, 0xFF	; 255
    10a2:	4f e7       	ldi	r20, 0x7F	; 127
    10a4:	57 e4       	ldi	r21, 0x47	; 71
    10a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10aa:	18 16       	cp	r1, r24
    10ac:	0c f0       	brlt	.+2      	; 0x10b0 <LCD_sendCommand+0xc2>
    10ae:	43 c0       	rjmp	.+134    	; 0x1136 <LCD_sendCommand+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b0:	fe 01       	movw	r30, r28
    10b2:	e1 5a       	subi	r30, 0xA1	; 161
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	60 81       	ld	r22, Z
    10b8:	71 81       	ldd	r23, Z+1	; 0x01
    10ba:	82 81       	ldd	r24, Z+2	; 0x02
    10bc:	93 81       	ldd	r25, Z+3	; 0x03
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e2       	ldi	r20, 0x20	; 32
    10c4:	51 e4       	ldi	r21, 0x41	; 65
    10c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	8e 01       	movw	r16, r28
    10d0:	07 5a       	subi	r16, 0xA7	; 167
    10d2:	1f 4f       	sbci	r17, 0xFF	; 255
    10d4:	bc 01       	movw	r22, r24
    10d6:	cd 01       	movw	r24, r26
    10d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	f8 01       	movw	r30, r16
    10e2:	91 83       	std	Z+1, r25	; 0x01
    10e4:	80 83       	st	Z, r24
    10e6:	1f c0       	rjmp	.+62     	; 0x1126 <LCD_sendCommand+0x138>
    10e8:	fe 01       	movw	r30, r28
    10ea:	e9 5a       	subi	r30, 0xA9	; 169
    10ec:	ff 4f       	sbci	r31, 0xFF	; 255
    10ee:	89 e1       	ldi	r24, 0x19	; 25
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	91 83       	std	Z+1, r25	; 0x01
    10f4:	80 83       	st	Z, r24
    10f6:	fe 01       	movw	r30, r28
    10f8:	e9 5a       	subi	r30, 0xA9	; 169
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	80 81       	ld	r24, Z
    10fe:	91 81       	ldd	r25, Z+1	; 0x01
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	f1 f7       	brne	.-4      	; 0x1100 <LCD_sendCommand+0x112>
    1104:	fe 01       	movw	r30, r28
    1106:	e9 5a       	subi	r30, 0xA9	; 169
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	91 83       	std	Z+1, r25	; 0x01
    110c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110e:	de 01       	movw	r26, r28
    1110:	a7 5a       	subi	r26, 0xA7	; 167
    1112:	bf 4f       	sbci	r27, 0xFF	; 255
    1114:	fe 01       	movw	r30, r28
    1116:	e7 5a       	subi	r30, 0xA7	; 167
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	11 96       	adiw	r26, 0x01	; 1
    1122:	9c 93       	st	X, r25
    1124:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1126:	fe 01       	movw	r30, r28
    1128:	e7 5a       	subi	r30, 0xA7	; 167
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	80 81       	ld	r24, Z
    112e:	91 81       	ldd	r25, Z+1	; 0x01
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	d1 f6       	brne	.-76     	; 0x10e8 <LCD_sendCommand+0xfa>
    1134:	27 c0       	rjmp	.+78     	; 0x1184 <LCD_sendCommand+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1136:	8e 01       	movw	r16, r28
    1138:	07 5a       	subi	r16, 0xA7	; 167
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	fe 01       	movw	r30, r28
    113e:	e5 5a       	subi	r30, 0xA5	; 165
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	60 81       	ld	r22, Z
    1144:	71 81       	ldd	r23, Z+1	; 0x01
    1146:	82 81       	ldd	r24, Z+2	; 0x02
    1148:	93 81       	ldd	r25, Z+3	; 0x03
    114a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	f8 01       	movw	r30, r16
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	80 83       	st	Z, r24
    1158:	de 01       	movw	r26, r28
    115a:	ab 5a       	subi	r26, 0xAB	; 171
    115c:	bf 4f       	sbci	r27, 0xFF	; 255
    115e:	fe 01       	movw	r30, r28
    1160:	e7 5a       	subi	r30, 0xA7	; 167
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	80 81       	ld	r24, Z
    1166:	91 81       	ldd	r25, Z+1	; 0x01
    1168:	8d 93       	st	X+, r24
    116a:	9c 93       	st	X, r25
    116c:	fe 01       	movw	r30, r28
    116e:	eb 5a       	subi	r30, 0xAB	; 171
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	80 81       	ld	r24, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <LCD_sendCommand+0x188>
    117a:	fe 01       	movw	r30, r28
    117c:	eb 5a       	subi	r30, 0xAB	; 171
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	91 83       	std	Z+1, r25	; 0x01
    1182:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1184:	ab e3       	ldi	r26, 0x3B	; 59
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	eb e3       	ldi	r30, 0x3B	; 59
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	84 60       	ori	r24, 0x04	; 4
    1190:	8c 93       	st	X, r24
    1192:	fe 01       	movw	r30, r28
    1194:	ef 5a       	subi	r30, 0xAF	; 175
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a0 e8       	ldi	r26, 0x80	; 128
    119e:	bf e3       	ldi	r27, 0x3F	; 63
    11a0:	80 83       	st	Z, r24
    11a2:	91 83       	std	Z+1, r25	; 0x01
    11a4:	a2 83       	std	Z+2, r26	; 0x02
    11a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a8:	8e 01       	movw	r16, r28
    11aa:	03 5b       	subi	r16, 0xB3	; 179
    11ac:	1f 4f       	sbci	r17, 0xFF	; 255
    11ae:	fe 01       	movw	r30, r28
    11b0:	ef 5a       	subi	r30, 0xAF	; 175
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	82 81       	ldd	r24, Z+2	; 0x02
    11ba:	93 81       	ldd	r25, Z+3	; 0x03
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	4a e7       	ldi	r20, 0x7A	; 122
    11c2:	53 e4       	ldi	r21, 0x43	; 67
    11c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	f8 01       	movw	r30, r16
    11ce:	80 83       	st	Z, r24
    11d0:	91 83       	std	Z+1, r25	; 0x01
    11d2:	a2 83       	std	Z+2, r26	; 0x02
    11d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11d6:	fe 01       	movw	r30, r28
    11d8:	e3 5b       	subi	r30, 0xB3	; 179
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	60 81       	ld	r22, Z
    11de:	71 81       	ldd	r23, Z+1	; 0x01
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	93 81       	ldd	r25, Z+3	; 0x03
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e8       	ldi	r20, 0x80	; 128
    11ea:	5f e3       	ldi	r21, 0x3F	; 63
    11ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11f0:	88 23       	and	r24, r24
    11f2:	44 f4       	brge	.+16     	; 0x1204 <LCD_sendCommand+0x216>
		__ticks = 1;
    11f4:	fe 01       	movw	r30, r28
    11f6:	e5 5b       	subi	r30, 0xB5	; 181
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	91 83       	std	Z+1, r25	; 0x01
    1200:	80 83       	st	Z, r24
    1202:	64 c0       	rjmp	.+200    	; 0x12cc <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    1204:	fe 01       	movw	r30, r28
    1206:	e3 5b       	subi	r30, 0xB3	; 179
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	60 81       	ld	r22, Z
    120c:	71 81       	ldd	r23, Z+1	; 0x01
    120e:	82 81       	ldd	r24, Z+2	; 0x02
    1210:	93 81       	ldd	r25, Z+3	; 0x03
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	3f ef       	ldi	r19, 0xFF	; 255
    1216:	4f e7       	ldi	r20, 0x7F	; 127
    1218:	57 e4       	ldi	r21, 0x47	; 71
    121a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    121e:	18 16       	cp	r1, r24
    1220:	0c f0       	brlt	.+2      	; 0x1224 <LCD_sendCommand+0x236>
    1222:	43 c0       	rjmp	.+134    	; 0x12aa <LCD_sendCommand+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1224:	fe 01       	movw	r30, r28
    1226:	ef 5a       	subi	r30, 0xAF	; 175
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	60 81       	ld	r22, Z
    122c:	71 81       	ldd	r23, Z+1	; 0x01
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e2       	ldi	r20, 0x20	; 32
    1238:	51 e4       	ldi	r21, 0x41	; 65
    123a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	8e 01       	movw	r16, r28
    1244:	05 5b       	subi	r16, 0xB5	; 181
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	f8 01       	movw	r30, r16
    1256:	91 83       	std	Z+1, r25	; 0x01
    1258:	80 83       	st	Z, r24
    125a:	1f c0       	rjmp	.+62     	; 0x129a <LCD_sendCommand+0x2ac>
    125c:	fe 01       	movw	r30, r28
    125e:	e7 5b       	subi	r30, 0xB7	; 183
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	89 e1       	ldi	r24, 0x19	; 25
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
    126a:	fe 01       	movw	r30, r28
    126c:	e7 5b       	subi	r30, 0xB7	; 183
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	80 81       	ld	r24, Z
    1272:	91 81       	ldd	r25, Z+1	; 0x01
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <LCD_sendCommand+0x286>
    1278:	fe 01       	movw	r30, r28
    127a:	e7 5b       	subi	r30, 0xB7	; 183
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	91 83       	std	Z+1, r25	; 0x01
    1280:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1282:	de 01       	movw	r26, r28
    1284:	a5 5b       	subi	r26, 0xB5	; 181
    1286:	bf 4f       	sbci	r27, 0xFF	; 255
    1288:	fe 01       	movw	r30, r28
    128a:	e5 5b       	subi	r30, 0xB5	; 181
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	80 81       	ld	r24, Z
    1290:	91 81       	ldd	r25, Z+1	; 0x01
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	11 96       	adiw	r26, 0x01	; 1
    1296:	9c 93       	st	X, r25
    1298:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129a:	fe 01       	movw	r30, r28
    129c:	e5 5b       	subi	r30, 0xB5	; 181
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	80 81       	ld	r24, Z
    12a2:	91 81       	ldd	r25, Z+1	; 0x01
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	d1 f6       	brne	.-76     	; 0x125c <LCD_sendCommand+0x26e>
    12a8:	27 c0       	rjmp	.+78     	; 0x12f8 <LCD_sendCommand+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12aa:	8e 01       	movw	r16, r28
    12ac:	05 5b       	subi	r16, 0xB5	; 181
    12ae:	1f 4f       	sbci	r17, 0xFF	; 255
    12b0:	fe 01       	movw	r30, r28
    12b2:	e3 5b       	subi	r30, 0xB3	; 179
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	93 81       	ldd	r25, Z+3	; 0x03
    12be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	f8 01       	movw	r30, r16
    12c8:	91 83       	std	Z+1, r25	; 0x01
    12ca:	80 83       	st	Z, r24
    12cc:	de 01       	movw	r26, r28
    12ce:	a9 5b       	subi	r26, 0xB9	; 185
    12d0:	bf 4f       	sbci	r27, 0xFF	; 255
    12d2:	fe 01       	movw	r30, r28
    12d4:	e5 5b       	subi	r30, 0xB5	; 181
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	8d 93       	st	X+, r24
    12de:	9c 93       	st	X, r25
    12e0:	fe 01       	movw	r30, r28
    12e2:	e9 5b       	subi	r30, 0xB9	; 185
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <LCD_sendCommand+0x2fc>
    12ee:	fe 01       	movw	r30, r28
    12f0:	e9 5b       	subi	r30, 0xB9	; 185
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	91 83       	std	Z+1, r25	; 0x01
    12f6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
	LCD_DATA_PORT = (LCD_DATA_PORT & ~((1 << D4) | (1 << D5) | (1 << D6) | (1 << D7))) | ((command & 0xF0)>>(4-D4));
    12f8:	ab e3       	ldi	r26, 0x3B	; 59
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	eb e3       	ldi	r30, 0x3B	; 59
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	28 2f       	mov	r18, r24
    1304:	27 78       	andi	r18, 0x87	; 135
    1306:	fe 01       	movw	r30, r28
    1308:	ed 59       	subi	r30, 0x9D	; 157
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	80 81       	ld	r24, Z
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	80 7f       	andi	r24, 0xF0	; 240
    1314:	90 70       	andi	r25, 0x00	; 0
    1316:	95 95       	asr	r25
    1318:	87 95       	ror	r24
    131a:	82 2b       	or	r24, r18
    131c:	8c 93       	st	X, r24
    131e:	fe 01       	movw	r30, r28
    1320:	ed 5b       	subi	r30, 0xBD	; 189
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a0 e8       	ldi	r26, 0x80	; 128
    132a:	bf e3       	ldi	r27, 0x3F	; 63
    132c:	80 83       	st	Z, r24
    132e:	91 83       	std	Z+1, r25	; 0x01
    1330:	a2 83       	std	Z+2, r26	; 0x02
    1332:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1334:	8e 01       	movw	r16, r28
    1336:	01 5c       	subi	r16, 0xC1	; 193
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
    133a:	fe 01       	movw	r30, r28
    133c:	ed 5b       	subi	r30, 0xBD	; 189
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	4a e7       	ldi	r20, 0x7A	; 122
    134e:	53 e4       	ldi	r21, 0x43	; 67
    1350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	f8 01       	movw	r30, r16
    135a:	80 83       	st	Z, r24
    135c:	91 83       	std	Z+1, r25	; 0x01
    135e:	a2 83       	std	Z+2, r26	; 0x02
    1360:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1362:	fe 01       	movw	r30, r28
    1364:	ff 96       	adiw	r30, 0x3f	; 63
    1366:	60 81       	ld	r22, Z
    1368:	71 81       	ldd	r23, Z+1	; 0x01
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e8       	ldi	r20, 0x80	; 128
    1374:	5f e3       	ldi	r21, 0x3F	; 63
    1376:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    137a:	88 23       	and	r24, r24
    137c:	2c f4       	brge	.+10     	; 0x1388 <LCD_sendCommand+0x39a>
		__ticks = 1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9e af       	std	Y+62, r25	; 0x3e
    1384:	8d af       	std	Y+61, r24	; 0x3d
    1386:	46 c0       	rjmp	.+140    	; 0x1414 <LCD_sendCommand+0x426>
	else if (__tmp > 65535)
    1388:	fe 01       	movw	r30, r28
    138a:	ff 96       	adiw	r30, 0x3f	; 63
    138c:	60 81       	ld	r22, Z
    138e:	71 81       	ldd	r23, Z+1	; 0x01
    1390:	82 81       	ldd	r24, Z+2	; 0x02
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	3f ef       	ldi	r19, 0xFF	; 255
    1398:	4f e7       	ldi	r20, 0x7F	; 127
    139a:	57 e4       	ldi	r21, 0x47	; 71
    139c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a0:	18 16       	cp	r1, r24
    13a2:	64 f5       	brge	.+88     	; 0x13fc <LCD_sendCommand+0x40e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a4:	fe 01       	movw	r30, r28
    13a6:	ed 5b       	subi	r30, 0xBD	; 189
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	60 81       	ld	r22, Z
    13ac:	71 81       	ldd	r23, Z+1	; 0x01
    13ae:	82 81       	ldd	r24, Z+2	; 0x02
    13b0:	93 81       	ldd	r25, Z+3	; 0x03
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e2       	ldi	r20, 0x20	; 32
    13b8:	51 e4       	ldi	r21, 0x41	; 65
    13ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	bc 01       	movw	r22, r24
    13c4:	cd 01       	movw	r24, r26
    13c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	9e af       	std	Y+62, r25	; 0x3e
    13d0:	8d af       	std	Y+61, r24	; 0x3d
    13d2:	0f c0       	rjmp	.+30     	; 0x13f2 <LCD_sendCommand+0x404>
    13d4:	89 e1       	ldi	r24, 0x19	; 25
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	9c af       	std	Y+60, r25	; 0x3c
    13da:	8b af       	std	Y+59, r24	; 0x3b
    13dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    13de:	9c ad       	ldd	r25, Y+60	; 0x3c
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <LCD_sendCommand+0x3f2>
    13e4:	9c af       	std	Y+60, r25	; 0x3c
    13e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    13ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	9e af       	std	Y+62, r25	; 0x3e
    13f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    13f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	69 f7       	brne	.-38     	; 0x13d4 <LCD_sendCommand+0x3e6>
    13fa:	16 c0       	rjmp	.+44     	; 0x1428 <LCD_sendCommand+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fc:	fe 01       	movw	r30, r28
    13fe:	ff 96       	adiw	r30, 0x3f	; 63
    1400:	60 81       	ld	r22, Z
    1402:	71 81       	ldd	r23, Z+1	; 0x01
    1404:	82 81       	ldd	r24, Z+2	; 0x02
    1406:	93 81       	ldd	r25, Z+3	; 0x03
    1408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	9e af       	std	Y+62, r25	; 0x3e
    1412:	8d af       	std	Y+61, r24	; 0x3d
    1414:	8d ad       	ldd	r24, Y+61	; 0x3d
    1416:	9e ad       	ldd	r25, Y+62	; 0x3e
    1418:	9a af       	std	Y+58, r25	; 0x3a
    141a:	89 af       	std	Y+57, r24	; 0x39
    141c:	89 ad       	ldd	r24, Y+57	; 0x39
    141e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <LCD_sendCommand+0x432>
    1424:	9a af       	std	Y+58, r25	; 0x3a
    1426:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1428:	ab e3       	ldi	r26, 0x3B	; 59
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	eb e3       	ldi	r30, 0x3B	; 59
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8b 7f       	andi	r24, 0xFB	; 251
    1434:	8c 93       	st	X, r24
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a0 e8       	ldi	r26, 0x80	; 128
    143c:	bf e3       	ldi	r27, 0x3F	; 63
    143e:	8d ab       	std	Y+53, r24	; 0x35
    1440:	9e ab       	std	Y+54, r25	; 0x36
    1442:	af ab       	std	Y+55, r26	; 0x37
    1444:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1446:	6d a9       	ldd	r22, Y+53	; 0x35
    1448:	7e a9       	ldd	r23, Y+54	; 0x36
    144a:	8f a9       	ldd	r24, Y+55	; 0x37
    144c:	98 ad       	ldd	r25, Y+56	; 0x38
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	4a e7       	ldi	r20, 0x7A	; 122
    1454:	53 e4       	ldi	r21, 0x43	; 67
    1456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	89 ab       	std	Y+49, r24	; 0x31
    1460:	9a ab       	std	Y+50, r25	; 0x32
    1462:	ab ab       	std	Y+51, r26	; 0x33
    1464:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1466:	69 a9       	ldd	r22, Y+49	; 0x31
    1468:	7a a9       	ldd	r23, Y+50	; 0x32
    146a:	8b a9       	ldd	r24, Y+51	; 0x33
    146c:	9c a9       	ldd	r25, Y+52	; 0x34
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e8       	ldi	r20, 0x80	; 128
    1474:	5f e3       	ldi	r21, 0x3F	; 63
    1476:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    147a:	88 23       	and	r24, r24
    147c:	2c f4       	brge	.+10     	; 0x1488 <LCD_sendCommand+0x49a>
		__ticks = 1;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	98 ab       	std	Y+48, r25	; 0x30
    1484:	8f a7       	std	Y+47, r24	; 0x2f
    1486:	3f c0       	rjmp	.+126    	; 0x1506 <LCD_sendCommand+0x518>
	else if (__tmp > 65535)
    1488:	69 a9       	ldd	r22, Y+49	; 0x31
    148a:	7a a9       	ldd	r23, Y+50	; 0x32
    148c:	8b a9       	ldd	r24, Y+51	; 0x33
    148e:	9c a9       	ldd	r25, Y+52	; 0x34
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	3f ef       	ldi	r19, 0xFF	; 255
    1494:	4f e7       	ldi	r20, 0x7F	; 127
    1496:	57 e4       	ldi	r21, 0x47	; 71
    1498:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    149c:	18 16       	cp	r1, r24
    149e:	4c f5       	brge	.+82     	; 0x14f2 <LCD_sendCommand+0x504>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a0:	6d a9       	ldd	r22, Y+53	; 0x35
    14a2:	7e a9       	ldd	r23, Y+54	; 0x36
    14a4:	8f a9       	ldd	r24, Y+55	; 0x37
    14a6:	98 ad       	ldd	r25, Y+56	; 0x38
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e2       	ldi	r20, 0x20	; 32
    14ae:	51 e4       	ldi	r21, 0x41	; 65
    14b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	bc 01       	movw	r22, r24
    14ba:	cd 01       	movw	r24, r26
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	98 ab       	std	Y+48, r25	; 0x30
    14c6:	8f a7       	std	Y+47, r24	; 0x2f
    14c8:	0f c0       	rjmp	.+30     	; 0x14e8 <LCD_sendCommand+0x4fa>
    14ca:	89 e1       	ldi	r24, 0x19	; 25
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9e a7       	std	Y+46, r25	; 0x2e
    14d0:	8d a7       	std	Y+45, r24	; 0x2d
    14d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    14d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <LCD_sendCommand+0x4e8>
    14da:	9e a7       	std	Y+46, r25	; 0x2e
    14dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14de:	8f a5       	ldd	r24, Y+47	; 0x2f
    14e0:	98 a9       	ldd	r25, Y+48	; 0x30
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	98 ab       	std	Y+48, r25	; 0x30
    14e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ea:	98 a9       	ldd	r25, Y+48	; 0x30
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	69 f7       	brne	.-38     	; 0x14ca <LCD_sendCommand+0x4dc>
    14f0:	14 c0       	rjmp	.+40     	; 0x151a <LCD_sendCommand+0x52c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f2:	69 a9       	ldd	r22, Y+49	; 0x31
    14f4:	7a a9       	ldd	r23, Y+50	; 0x32
    14f6:	8b a9       	ldd	r24, Y+51	; 0x33
    14f8:	9c a9       	ldd	r25, Y+52	; 0x34
    14fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	98 ab       	std	Y+48, r25	; 0x30
    1504:	8f a7       	std	Y+47, r24	; 0x2f
    1506:	8f a5       	ldd	r24, Y+47	; 0x2f
    1508:	98 a9       	ldd	r25, Y+48	; 0x30
    150a:	9c a7       	std	Y+44, r25	; 0x2c
    150c:	8b a7       	std	Y+43, r24	; 0x2b
    150e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1510:	9c a5       	ldd	r25, Y+44	; 0x2c
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <LCD_sendCommand+0x524>
    1516:	9c a7       	std	Y+44, r25	; 0x2c
    1518:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    151a:	ab e3       	ldi	r26, 0x3B	; 59
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	eb e3       	ldi	r30, 0x3B	; 59
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	84 60       	ori	r24, 0x04	; 4
    1526:	8c 93       	st	X, r24
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a0 e8       	ldi	r26, 0x80	; 128
    152e:	bf e3       	ldi	r27, 0x3F	; 63
    1530:	8f a3       	std	Y+39, r24	; 0x27
    1532:	98 a7       	std	Y+40, r25	; 0x28
    1534:	a9 a7       	std	Y+41, r26	; 0x29
    1536:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1538:	6f a1       	ldd	r22, Y+39	; 0x27
    153a:	78 a5       	ldd	r23, Y+40	; 0x28
    153c:	89 a5       	ldd	r24, Y+41	; 0x29
    153e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	4a e7       	ldi	r20, 0x7A	; 122
    1546:	53 e4       	ldi	r21, 0x43	; 67
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	8b a3       	std	Y+35, r24	; 0x23
    1552:	9c a3       	std	Y+36, r25	; 0x24
    1554:	ad a3       	std	Y+37, r26	; 0x25
    1556:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1558:	6b a1       	ldd	r22, Y+35	; 0x23
    155a:	7c a1       	ldd	r23, Y+36	; 0x24
    155c:	8d a1       	ldd	r24, Y+37	; 0x25
    155e:	9e a1       	ldd	r25, Y+38	; 0x26
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e8       	ldi	r20, 0x80	; 128
    1566:	5f e3       	ldi	r21, 0x3F	; 63
    1568:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    156c:	88 23       	and	r24, r24
    156e:	2c f4       	brge	.+10     	; 0x157a <LCD_sendCommand+0x58c>
		__ticks = 1;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	9a a3       	std	Y+34, r25	; 0x22
    1576:	89 a3       	std	Y+33, r24	; 0x21
    1578:	3f c0       	rjmp	.+126    	; 0x15f8 <LCD_sendCommand+0x60a>
	else if (__tmp > 65535)
    157a:	6b a1       	ldd	r22, Y+35	; 0x23
    157c:	7c a1       	ldd	r23, Y+36	; 0x24
    157e:	8d a1       	ldd	r24, Y+37	; 0x25
    1580:	9e a1       	ldd	r25, Y+38	; 0x26
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	3f ef       	ldi	r19, 0xFF	; 255
    1586:	4f e7       	ldi	r20, 0x7F	; 127
    1588:	57 e4       	ldi	r21, 0x47	; 71
    158a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    158e:	18 16       	cp	r1, r24
    1590:	4c f5       	brge	.+82     	; 0x15e4 <LCD_sendCommand+0x5f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1592:	6f a1       	ldd	r22, Y+39	; 0x27
    1594:	78 a5       	ldd	r23, Y+40	; 0x28
    1596:	89 a5       	ldd	r24, Y+41	; 0x29
    1598:	9a a5       	ldd	r25, Y+42	; 0x2a
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e2       	ldi	r20, 0x20	; 32
    15a0:	51 e4       	ldi	r21, 0x41	; 65
    15a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	9a a3       	std	Y+34, r25	; 0x22
    15b8:	89 a3       	std	Y+33, r24	; 0x21
    15ba:	0f c0       	rjmp	.+30     	; 0x15da <LCD_sendCommand+0x5ec>
    15bc:	89 e1       	ldi	r24, 0x19	; 25
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	98 a3       	std	Y+32, r25	; 0x20
    15c2:	8f 8f       	std	Y+31, r24	; 0x1f
    15c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15c6:	98 a1       	ldd	r25, Y+32	; 0x20
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <LCD_sendCommand+0x5da>
    15cc:	98 a3       	std	Y+32, r25	; 0x20
    15ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d0:	89 a1       	ldd	r24, Y+33	; 0x21
    15d2:	9a a1       	ldd	r25, Y+34	; 0x22
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	9a a3       	std	Y+34, r25	; 0x22
    15d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15da:	89 a1       	ldd	r24, Y+33	; 0x21
    15dc:	9a a1       	ldd	r25, Y+34	; 0x22
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	69 f7       	brne	.-38     	; 0x15bc <LCD_sendCommand+0x5ce>
    15e2:	14 c0       	rjmp	.+40     	; 0x160c <LCD_sendCommand+0x61e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e4:	6b a1       	ldd	r22, Y+35	; 0x23
    15e6:	7c a1       	ldd	r23, Y+36	; 0x24
    15e8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ea:	9e a1       	ldd	r25, Y+38	; 0x26
    15ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9a a3       	std	Y+34, r25	; 0x22
    15f6:	89 a3       	std	Y+33, r24	; 0x21
    15f8:	89 a1       	ldd	r24, Y+33	; 0x21
    15fa:	9a a1       	ldd	r25, Y+34	; 0x22
    15fc:	9e 8f       	std	Y+30, r25	; 0x1e
    15fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1600:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1602:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <LCD_sendCommand+0x616>
    1608:	9e 8f       	std	Y+30, r25	; 0x1e
    160a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
	LCD_DATA_PORT = (LCD_DATA_PORT & ~((1 << D4) | (1 << D5) | (1 << D6) | (1 << D7))) | ((command & 0x0F)<<(D4));
    160c:	ab e3       	ldi	r26, 0x3B	; 59
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	eb e3       	ldi	r30, 0x3B	; 59
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	28 2f       	mov	r18, r24
    1618:	27 78       	andi	r18, 0x87	; 135
    161a:	fe 01       	movw	r30, r28
    161c:	ed 59       	subi	r30, 0x9D	; 157
    161e:	ff 4f       	sbci	r31, 0xFF	; 255
    1620:	80 81       	ld	r24, Z
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	8f 70       	andi	r24, 0x0F	; 15
    1628:	90 70       	andi	r25, 0x00	; 0
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	82 2b       	or	r24, r18
    1638:	8c 93       	st	X, r24
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	a0 e8       	ldi	r26, 0x80	; 128
    1640:	bf e3       	ldi	r27, 0x3F	; 63
    1642:	89 8f       	std	Y+25, r24	; 0x19
    1644:	9a 8f       	std	Y+26, r25	; 0x1a
    1646:	ab 8f       	std	Y+27, r26	; 0x1b
    1648:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164a:	69 8d       	ldd	r22, Y+25	; 0x19
    164c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    164e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1650:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	4a e7       	ldi	r20, 0x7A	; 122
    1658:	53 e4       	ldi	r21, 0x43	; 67
    165a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	8d 8b       	std	Y+21, r24	; 0x15
    1664:	9e 8b       	std	Y+22, r25	; 0x16
    1666:	af 8b       	std	Y+23, r26	; 0x17
    1668:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    166a:	6d 89       	ldd	r22, Y+21	; 0x15
    166c:	7e 89       	ldd	r23, Y+22	; 0x16
    166e:	8f 89       	ldd	r24, Y+23	; 0x17
    1670:	98 8d       	ldd	r25, Y+24	; 0x18
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e8       	ldi	r20, 0x80	; 128
    1678:	5f e3       	ldi	r21, 0x3F	; 63
    167a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    167e:	88 23       	and	r24, r24
    1680:	2c f4       	brge	.+10     	; 0x168c <LCD_sendCommand+0x69e>
		__ticks = 1;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9c 8b       	std	Y+20, r25	; 0x14
    1688:	8b 8b       	std	Y+19, r24	; 0x13
    168a:	3f c0       	rjmp	.+126    	; 0x170a <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    168c:	6d 89       	ldd	r22, Y+21	; 0x15
    168e:	7e 89       	ldd	r23, Y+22	; 0x16
    1690:	8f 89       	ldd	r24, Y+23	; 0x17
    1692:	98 8d       	ldd	r25, Y+24	; 0x18
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	3f ef       	ldi	r19, 0xFF	; 255
    1698:	4f e7       	ldi	r20, 0x7F	; 127
    169a:	57 e4       	ldi	r21, 0x47	; 71
    169c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a0:	18 16       	cp	r1, r24
    16a2:	4c f5       	brge	.+82     	; 0x16f6 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a4:	69 8d       	ldd	r22, Y+25	; 0x19
    16a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e2       	ldi	r20, 0x20	; 32
    16b2:	51 e4       	ldi	r21, 0x41	; 65
    16b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	bc 01       	movw	r22, r24
    16be:	cd 01       	movw	r24, r26
    16c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	9c 8b       	std	Y+20, r25	; 0x14
    16ca:	8b 8b       	std	Y+19, r24	; 0x13
    16cc:	0f c0       	rjmp	.+30     	; 0x16ec <LCD_sendCommand+0x6fe>
    16ce:	89 e1       	ldi	r24, 0x19	; 25
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9a 8b       	std	Y+18, r25	; 0x12
    16d4:	89 8b       	std	Y+17, r24	; 0x11
    16d6:	89 89       	ldd	r24, Y+17	; 0x11
    16d8:	9a 89       	ldd	r25, Y+18	; 0x12
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <LCD_sendCommand+0x6ec>
    16de:	9a 8b       	std	Y+18, r25	; 0x12
    16e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e2:	8b 89       	ldd	r24, Y+19	; 0x13
    16e4:	9c 89       	ldd	r25, Y+20	; 0x14
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	9c 8b       	std	Y+20, r25	; 0x14
    16ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ec:	8b 89       	ldd	r24, Y+19	; 0x13
    16ee:	9c 89       	ldd	r25, Y+20	; 0x14
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	69 f7       	brne	.-38     	; 0x16ce <LCD_sendCommand+0x6e0>
    16f4:	14 c0       	rjmp	.+40     	; 0x171e <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f6:	6d 89       	ldd	r22, Y+21	; 0x15
    16f8:	7e 89       	ldd	r23, Y+22	; 0x16
    16fa:	8f 89       	ldd	r24, Y+23	; 0x17
    16fc:	98 8d       	ldd	r25, Y+24	; 0x18
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9c 8b       	std	Y+20, r25	; 0x14
    1708:	8b 8b       	std	Y+19, r24	; 0x13
    170a:	8b 89       	ldd	r24, Y+19	; 0x13
    170c:	9c 89       	ldd	r25, Y+20	; 0x14
    170e:	98 8b       	std	Y+16, r25	; 0x10
    1710:	8f 87       	std	Y+15, r24	; 0x0f
    1712:	8f 85       	ldd	r24, Y+15	; 0x0f
    1714:	98 89       	ldd	r25, Y+16	; 0x10
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <LCD_sendCommand+0x728>
    171a:	98 8b       	std	Y+16, r25	; 0x10
    171c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    171e:	ab e3       	ldi	r26, 0x3B	; 59
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	eb e3       	ldi	r30, 0x3B	; 59
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8b 7f       	andi	r24, 0xFB	; 251
    172a:	8c 93       	st	X, r24
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a0 e8       	ldi	r26, 0x80	; 128
    1732:	bf e3       	ldi	r27, 0x3F	; 63
    1734:	8b 87       	std	Y+11, r24	; 0x0b
    1736:	9c 87       	std	Y+12, r25	; 0x0c
    1738:	ad 87       	std	Y+13, r26	; 0x0d
    173a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173c:	6b 85       	ldd	r22, Y+11	; 0x0b
    173e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1740:	8d 85       	ldd	r24, Y+13	; 0x0d
    1742:	9e 85       	ldd	r25, Y+14	; 0x0e
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4a e7       	ldi	r20, 0x7A	; 122
    174a:	53 e4       	ldi	r21, 0x43	; 67
    174c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	8f 83       	std	Y+7, r24	; 0x07
    1756:	98 87       	std	Y+8, r25	; 0x08
    1758:	a9 87       	std	Y+9, r26	; 0x09
    175a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    175c:	6f 81       	ldd	r22, Y+7	; 0x07
    175e:	78 85       	ldd	r23, Y+8	; 0x08
    1760:	89 85       	ldd	r24, Y+9	; 0x09
    1762:	9a 85       	ldd	r25, Y+10	; 0x0a
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e8       	ldi	r20, 0x80	; 128
    176a:	5f e3       	ldi	r21, 0x3F	; 63
    176c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1770:	88 23       	and	r24, r24
    1772:	2c f4       	brge	.+10     	; 0x177e <LCD_sendCommand+0x790>
		__ticks = 1;
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
    177c:	3f c0       	rjmp	.+126    	; 0x17fc <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    177e:	6f 81       	ldd	r22, Y+7	; 0x07
    1780:	78 85       	ldd	r23, Y+8	; 0x08
    1782:	89 85       	ldd	r24, Y+9	; 0x09
    1784:	9a 85       	ldd	r25, Y+10	; 0x0a
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	3f ef       	ldi	r19, 0xFF	; 255
    178a:	4f e7       	ldi	r20, 0x7F	; 127
    178c:	57 e4       	ldi	r21, 0x47	; 71
    178e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1792:	18 16       	cp	r1, r24
    1794:	4c f5       	brge	.+82     	; 0x17e8 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1796:	6b 85       	ldd	r22, Y+11	; 0x0b
    1798:	7c 85       	ldd	r23, Y+12	; 0x0c
    179a:	8d 85       	ldd	r24, Y+13	; 0x0d
    179c:	9e 85       	ldd	r25, Y+14	; 0x0e
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e2       	ldi	r20, 0x20	; 32
    17a4:	51 e4       	ldi	r21, 0x41	; 65
    17a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	bc 01       	movw	r22, r24
    17b0:	cd 01       	movw	r24, r26
    17b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	9e 83       	std	Y+6, r25	; 0x06
    17bc:	8d 83       	std	Y+5, r24	; 0x05
    17be:	0f c0       	rjmp	.+30     	; 0x17de <LCD_sendCommand+0x7f0>
    17c0:	89 e1       	ldi	r24, 0x19	; 25
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9c 83       	std	Y+4, r25	; 0x04
    17c6:	8b 83       	std	Y+3, r24	; 0x03
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <LCD_sendCommand+0x7de>
    17d0:	9c 83       	std	Y+4, r25	; 0x04
    17d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
    17d6:	9e 81       	ldd	r25, Y+6	; 0x06
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	9e 83       	std	Y+6, r25	; 0x06
    17dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	9e 81       	ldd	r25, Y+6	; 0x06
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	69 f7       	brne	.-38     	; 0x17c0 <LCD_sendCommand+0x7d2>
    17e6:	14 c0       	rjmp	.+40     	; 0x1810 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ea:	78 85       	ldd	r23, Y+8	; 0x08
    17ec:	89 85       	ldd	r24, Y+9	; 0x09
    17ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	9e 83       	std	Y+6, r25	; 0x06
    17fa:	8d 83       	std	Y+5, r24	; 0x05
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1800:	9a 83       	std	Y+2, r25	; 0x02
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	9a 81       	ldd	r25, Y+2	; 0x02
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <LCD_sendCommand+0x81a>
    180c:	9a 83       	std	Y+2, r25	; 0x02
    180e:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1810:	cd 59       	subi	r28, 0x9D	; 157
    1812:	df 4f       	sbci	r29, 0xFF	; 255
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	08 95       	ret

00001828 <LCD_displayCharacter>:

/*---------------------------------------------------------------------------------*/

void LCD_displayCharacter(uint8 data)
{
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	c3 56       	subi	r28, 0x63	; 99
    1836:	d0 40       	sbci	r29, 0x00	; 0
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	fe 01       	movw	r30, r28
    1844:	ed 59       	subi	r30, 0x9D	; 157
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    184a:	ab e3       	ldi	r26, 0x3B	; 59
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	eb e3       	ldi	r30, 0x3B	; 59
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	82 60       	ori	r24, 0x02	; 2
    1856:	8c 93       	st	X, r24
    1858:	fe 01       	movw	r30, r28
    185a:	e1 5a       	subi	r30, 0xA1	; 161
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a0 e8       	ldi	r26, 0x80	; 128
    1864:	bf e3       	ldi	r27, 0x3F	; 63
    1866:	80 83       	st	Z, r24
    1868:	91 83       	std	Z+1, r25	; 0x01
    186a:	a2 83       	std	Z+2, r26	; 0x02
    186c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186e:	8e 01       	movw	r16, r28
    1870:	05 5a       	subi	r16, 0xA5	; 165
    1872:	1f 4f       	sbci	r17, 0xFF	; 255
    1874:	fe 01       	movw	r30, r28
    1876:	e1 5a       	subi	r30, 0xA1	; 161
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	60 81       	ld	r22, Z
    187c:	71 81       	ldd	r23, Z+1	; 0x01
    187e:	82 81       	ldd	r24, Z+2	; 0x02
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	4a e7       	ldi	r20, 0x7A	; 122
    1888:	53 e4       	ldi	r21, 0x43	; 67
    188a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	f8 01       	movw	r30, r16
    1894:	80 83       	st	Z, r24
    1896:	91 83       	std	Z+1, r25	; 0x01
    1898:	a2 83       	std	Z+2, r26	; 0x02
    189a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    189c:	fe 01       	movw	r30, r28
    189e:	e5 5a       	subi	r30, 0xA5	; 165
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	60 81       	ld	r22, Z
    18a4:	71 81       	ldd	r23, Z+1	; 0x01
    18a6:	82 81       	ldd	r24, Z+2	; 0x02
    18a8:	93 81       	ldd	r25, Z+3	; 0x03
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e8       	ldi	r20, 0x80	; 128
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b6:	88 23       	and	r24, r24
    18b8:	44 f4       	brge	.+16     	; 0x18ca <LCD_displayCharacter+0xa2>
		__ticks = 1;
    18ba:	fe 01       	movw	r30, r28
    18bc:	e7 5a       	subi	r30, 0xA7	; 167
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
    18c8:	64 c0       	rjmp	.+200    	; 0x1992 <LCD_displayCharacter+0x16a>
	else if (__tmp > 65535)
    18ca:	fe 01       	movw	r30, r28
    18cc:	e5 5a       	subi	r30, 0xA5	; 165
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	60 81       	ld	r22, Z
    18d2:	71 81       	ldd	r23, Z+1	; 0x01
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	3f ef       	ldi	r19, 0xFF	; 255
    18dc:	4f e7       	ldi	r20, 0x7F	; 127
    18de:	57 e4       	ldi	r21, 0x47	; 71
    18e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e4:	18 16       	cp	r1, r24
    18e6:	0c f0       	brlt	.+2      	; 0x18ea <LCD_displayCharacter+0xc2>
    18e8:	43 c0       	rjmp	.+134    	; 0x1970 <LCD_displayCharacter+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ea:	fe 01       	movw	r30, r28
    18ec:	e1 5a       	subi	r30, 0xA1	; 161
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	60 81       	ld	r22, Z
    18f2:	71 81       	ldd	r23, Z+1	; 0x01
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	93 81       	ldd	r25, Z+3	; 0x03
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e2       	ldi	r20, 0x20	; 32
    18fe:	51 e4       	ldi	r21, 0x41	; 65
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	8e 01       	movw	r16, r28
    190a:	07 5a       	subi	r16, 0xA7	; 167
    190c:	1f 4f       	sbci	r17, 0xFF	; 255
    190e:	bc 01       	movw	r22, r24
    1910:	cd 01       	movw	r24, r26
    1912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	f8 01       	movw	r30, r16
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	80 83       	st	Z, r24
    1920:	1f c0       	rjmp	.+62     	; 0x1960 <LCD_displayCharacter+0x138>
    1922:	fe 01       	movw	r30, r28
    1924:	e9 5a       	subi	r30, 0xA9	; 169
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	89 e1       	ldi	r24, 0x19	; 25
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	80 83       	st	Z, r24
    1930:	fe 01       	movw	r30, r28
    1932:	e9 5a       	subi	r30, 0xA9	; 169
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	80 81       	ld	r24, Z
    1938:	91 81       	ldd	r25, Z+1	; 0x01
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <LCD_displayCharacter+0x112>
    193e:	fe 01       	movw	r30, r28
    1940:	e9 5a       	subi	r30, 0xA9	; 169
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1948:	de 01       	movw	r26, r28
    194a:	a7 5a       	subi	r26, 0xA7	; 167
    194c:	bf 4f       	sbci	r27, 0xFF	; 255
    194e:	fe 01       	movw	r30, r28
    1950:	e7 5a       	subi	r30, 0xA7	; 167
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	80 81       	ld	r24, Z
    1956:	91 81       	ldd	r25, Z+1	; 0x01
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	11 96       	adiw	r26, 0x01	; 1
    195c:	9c 93       	st	X, r25
    195e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1960:	fe 01       	movw	r30, r28
    1962:	e7 5a       	subi	r30, 0xA7	; 167
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	80 81       	ld	r24, Z
    1968:	91 81       	ldd	r25, Z+1	; 0x01
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	d1 f6       	brne	.-76     	; 0x1922 <LCD_displayCharacter+0xfa>
    196e:	27 c0       	rjmp	.+78     	; 0x19be <LCD_displayCharacter+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1970:	8e 01       	movw	r16, r28
    1972:	07 5a       	subi	r16, 0xA7	; 167
    1974:	1f 4f       	sbci	r17, 0xFF	; 255
    1976:	fe 01       	movw	r30, r28
    1978:	e5 5a       	subi	r30, 0xA5	; 165
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	60 81       	ld	r22, Z
    197e:	71 81       	ldd	r23, Z+1	; 0x01
    1980:	82 81       	ldd	r24, Z+2	; 0x02
    1982:	93 81       	ldd	r25, Z+3	; 0x03
    1984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	f8 01       	movw	r30, r16
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	80 83       	st	Z, r24
    1992:	de 01       	movw	r26, r28
    1994:	ab 5a       	subi	r26, 0xAB	; 171
    1996:	bf 4f       	sbci	r27, 0xFF	; 255
    1998:	fe 01       	movw	r30, r28
    199a:	e7 5a       	subi	r30, 0xA7	; 167
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	80 81       	ld	r24, Z
    19a0:	91 81       	ldd	r25, Z+1	; 0x01
    19a2:	8d 93       	st	X+, r24
    19a4:	9c 93       	st	X, r25
    19a6:	fe 01       	movw	r30, r28
    19a8:	eb 5a       	subi	r30, 0xAB	; 171
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 81       	ld	r24, Z
    19ae:	91 81       	ldd	r25, Z+1	; 0x01
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <LCD_displayCharacter+0x188>
    19b4:	fe 01       	movw	r30, r28
    19b6:	eb 5a       	subi	r30, 0xAB	; 171
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    19be:	ab e3       	ldi	r26, 0x3B	; 59
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	eb e3       	ldi	r30, 0x3B	; 59
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	84 60       	ori	r24, 0x04	; 4
    19ca:	8c 93       	st	X, r24
    19cc:	fe 01       	movw	r30, r28
    19ce:	ef 5a       	subi	r30, 0xAF	; 175
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a0 e8       	ldi	r26, 0x80	; 128
    19d8:	bf e3       	ldi	r27, 0x3F	; 63
    19da:	80 83       	st	Z, r24
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	a2 83       	std	Z+2, r26	; 0x02
    19e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e2:	8e 01       	movw	r16, r28
    19e4:	03 5b       	subi	r16, 0xB3	; 179
    19e6:	1f 4f       	sbci	r17, 0xFF	; 255
    19e8:	fe 01       	movw	r30, r28
    19ea:	ef 5a       	subi	r30, 0xAF	; 175
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	60 81       	ld	r22, Z
    19f0:	71 81       	ldd	r23, Z+1	; 0x01
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	4a e7       	ldi	r20, 0x7A	; 122
    19fc:	53 e4       	ldi	r21, 0x43	; 67
    19fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	f8 01       	movw	r30, r16
    1a08:	80 83       	st	Z, r24
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	a2 83       	std	Z+2, r26	; 0x02
    1a0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a10:	fe 01       	movw	r30, r28
    1a12:	e3 5b       	subi	r30, 0xB3	; 179
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	60 81       	ld	r22, Z
    1a18:	71 81       	ldd	r23, Z+1	; 0x01
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	5f e3       	ldi	r21, 0x3F	; 63
    1a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a2a:	88 23       	and	r24, r24
    1a2c:	44 f4       	brge	.+16     	; 0x1a3e <LCD_displayCharacter+0x216>
		__ticks = 1;
    1a2e:	fe 01       	movw	r30, r28
    1a30:	e5 5b       	subi	r30, 0xB5	; 181
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	80 83       	st	Z, r24
    1a3c:	64 c0       	rjmp	.+200    	; 0x1b06 <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e3 5b       	subi	r30, 0xB3	; 179
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	3f ef       	ldi	r19, 0xFF	; 255
    1a50:	4f e7       	ldi	r20, 0x7F	; 127
    1a52:	57 e4       	ldi	r21, 0x47	; 71
    1a54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a58:	18 16       	cp	r1, r24
    1a5a:	0c f0       	brlt	.+2      	; 0x1a5e <LCD_displayCharacter+0x236>
    1a5c:	43 c0       	rjmp	.+134    	; 0x1ae4 <LCD_displayCharacter+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5e:	fe 01       	movw	r30, r28
    1a60:	ef 5a       	subi	r30, 0xAF	; 175
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	60 81       	ld	r22, Z
    1a66:	71 81       	ldd	r23, Z+1	; 0x01
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	93 81       	ldd	r25, Z+3	; 0x03
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e2       	ldi	r20, 0x20	; 32
    1a72:	51 e4       	ldi	r21, 0x41	; 65
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	8e 01       	movw	r16, r28
    1a7e:	05 5b       	subi	r16, 0xB5	; 181
    1a80:	1f 4f       	sbci	r17, 0xFF	; 255
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	f8 01       	movw	r30, r16
    1a90:	91 83       	std	Z+1, r25	; 0x01
    1a92:	80 83       	st	Z, r24
    1a94:	1f c0       	rjmp	.+62     	; 0x1ad4 <LCD_displayCharacter+0x2ac>
    1a96:	fe 01       	movw	r30, r28
    1a98:	e7 5b       	subi	r30, 0xB7	; 183
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	89 e1       	ldi	r24, 0x19	; 25
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	91 83       	std	Z+1, r25	; 0x01
    1aa2:	80 83       	st	Z, r24
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	e7 5b       	subi	r30, 0xB7	; 183
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	80 81       	ld	r24, Z
    1aac:	91 81       	ldd	r25, Z+1	; 0x01
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_displayCharacter+0x286>
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e7 5b       	subi	r30, 0xB7	; 183
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	91 83       	std	Z+1, r25	; 0x01
    1aba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abc:	de 01       	movw	r26, r28
    1abe:	a5 5b       	subi	r26, 0xB5	; 181
    1ac0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e5 5b       	subi	r30, 0xB5	; 181
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	80 81       	ld	r24, Z
    1aca:	91 81       	ldd	r25, Z+1	; 0x01
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	11 96       	adiw	r26, 0x01	; 1
    1ad0:	9c 93       	st	X, r25
    1ad2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e5 5b       	subi	r30, 0xB5	; 181
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	d1 f6       	brne	.-76     	; 0x1a96 <LCD_displayCharacter+0x26e>
    1ae2:	27 c0       	rjmp	.+78     	; 0x1b32 <LCD_displayCharacter+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae4:	8e 01       	movw	r16, r28
    1ae6:	05 5b       	subi	r16, 0xB5	; 181
    1ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aea:	fe 01       	movw	r30, r28
    1aec:	e3 5b       	subi	r30, 0xB3	; 179
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	60 81       	ld	r22, Z
    1af2:	71 81       	ldd	r23, Z+1	; 0x01
    1af4:	82 81       	ldd	r24, Z+2	; 0x02
    1af6:	93 81       	ldd	r25, Z+3	; 0x03
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	f8 01       	movw	r30, r16
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24
    1b06:	de 01       	movw	r26, r28
    1b08:	a9 5b       	subi	r26, 0xB9	; 185
    1b0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e5 5b       	subi	r30, 0xB5	; 181
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	80 81       	ld	r24, Z
    1b14:	91 81       	ldd	r25, Z+1	; 0x01
    1b16:	8d 93       	st	X+, r24
    1b18:	9c 93       	st	X, r25
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	e9 5b       	subi	r30, 0xB9	; 185
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	80 81       	ld	r24, Z
    1b22:	91 81       	ldd	r25, Z+1	; 0x01
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <LCD_displayCharacter+0x2fc>
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e9 5b       	subi	r30, 0xB9	; 185
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
	LCD_DATA_PORT = (LCD_DATA_PORT & ~((1 << D4) | (1 << D5) | (1 << D6) | (1 << D7))) | ((data & 0xF0)>>(4-D4));
    1b32:	ab e3       	ldi	r26, 0x3B	; 59
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	eb e3       	ldi	r30, 0x3B	; 59
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	27 78       	andi	r18, 0x87	; 135
    1b40:	fe 01       	movw	r30, r28
    1b42:	ed 59       	subi	r30, 0x9D	; 157
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	88 2f       	mov	r24, r24
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	80 7f       	andi	r24, 0xF0	; 240
    1b4e:	90 70       	andi	r25, 0x00	; 0
    1b50:	95 95       	asr	r25
    1b52:	87 95       	ror	r24
    1b54:	82 2b       	or	r24, r18
    1b56:	8c 93       	st	X, r24
    1b58:	fe 01       	movw	r30, r28
    1b5a:	ed 5b       	subi	r30, 0xBD	; 189
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	a0 e8       	ldi	r26, 0x80	; 128
    1b64:	bf e3       	ldi	r27, 0x3F	; 63
    1b66:	80 83       	st	Z, r24
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	a2 83       	std	Z+2, r26	; 0x02
    1b6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6e:	8e 01       	movw	r16, r28
    1b70:	01 5c       	subi	r16, 0xC1	; 193
    1b72:	1f 4f       	sbci	r17, 0xFF	; 255
    1b74:	fe 01       	movw	r30, r28
    1b76:	ed 5b       	subi	r30, 0xBD	; 189
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	4a e7       	ldi	r20, 0x7A	; 122
    1b88:	53 e4       	ldi	r21, 0x43	; 67
    1b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	f8 01       	movw	r30, r16
    1b94:	80 83       	st	Z, r24
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	a2 83       	std	Z+2, r26	; 0x02
    1b9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	ff 96       	adiw	r30, 0x3f	; 63
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e8       	ldi	r20, 0x80	; 128
    1bae:	5f e3       	ldi	r21, 0x3F	; 63
    1bb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	2c f4       	brge	.+10     	; 0x1bc2 <LCD_displayCharacter+0x39a>
		__ticks = 1;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9e af       	std	Y+62, r25	; 0x3e
    1bbe:	8d af       	std	Y+61, r24	; 0x3d
    1bc0:	46 c0       	rjmp	.+140    	; 0x1c4e <LCD_displayCharacter+0x426>
	else if (__tmp > 65535)
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	ff 96       	adiw	r30, 0x3f	; 63
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	93 81       	ldd	r25, Z+3	; 0x03
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	3f ef       	ldi	r19, 0xFF	; 255
    1bd2:	4f e7       	ldi	r20, 0x7F	; 127
    1bd4:	57 e4       	ldi	r21, 0x47	; 71
    1bd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bda:	18 16       	cp	r1, r24
    1bdc:	64 f5       	brge	.+88     	; 0x1c36 <LCD_displayCharacter+0x40e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bde:	fe 01       	movw	r30, r28
    1be0:	ed 5b       	subi	r30, 0xBD	; 189
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	60 81       	ld	r22, Z
    1be6:	71 81       	ldd	r23, Z+1	; 0x01
    1be8:	82 81       	ldd	r24, Z+2	; 0x02
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e2       	ldi	r20, 0x20	; 32
    1bf2:	51 e4       	ldi	r21, 0x41	; 65
    1bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	bc 01       	movw	r22, r24
    1bfe:	cd 01       	movw	r24, r26
    1c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	9e af       	std	Y+62, r25	; 0x3e
    1c0a:	8d af       	std	Y+61, r24	; 0x3d
    1c0c:	0f c0       	rjmp	.+30     	; 0x1c2c <LCD_displayCharacter+0x404>
    1c0e:	89 e1       	ldi	r24, 0x19	; 25
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	9c af       	std	Y+60, r25	; 0x3c
    1c14:	8b af       	std	Y+59, r24	; 0x3b
    1c16:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c18:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LCD_displayCharacter+0x3f2>
    1c1e:	9c af       	std	Y+60, r25	; 0x3c
    1c20:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c22:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c24:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	9e af       	std	Y+62, r25	; 0x3e
    1c2a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	69 f7       	brne	.-38     	; 0x1c0e <LCD_displayCharacter+0x3e6>
    1c34:	16 c0       	rjmp	.+44     	; 0x1c62 <LCD_displayCharacter+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c36:	fe 01       	movw	r30, r28
    1c38:	ff 96       	adiw	r30, 0x3f	; 63
    1c3a:	60 81       	ld	r22, Z
    1c3c:	71 81       	ldd	r23, Z+1	; 0x01
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9e af       	std	Y+62, r25	; 0x3e
    1c4c:	8d af       	std	Y+61, r24	; 0x3d
    1c4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c50:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c52:	9a af       	std	Y+58, r25	; 0x3a
    1c54:	89 af       	std	Y+57, r24	; 0x39
    1c56:	89 ad       	ldd	r24, Y+57	; 0x39
    1c58:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_displayCharacter+0x432>
    1c5e:	9a af       	std	Y+58, r25	; 0x3a
    1c60:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1c62:	ab e3       	ldi	r26, 0x3B	; 59
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	eb e3       	ldi	r30, 0x3B	; 59
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	8b 7f       	andi	r24, 0xFB	; 251
    1c6e:	8c 93       	st	X, r24
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	a0 e8       	ldi	r26, 0x80	; 128
    1c76:	bf e3       	ldi	r27, 0x3F	; 63
    1c78:	8d ab       	std	Y+53, r24	; 0x35
    1c7a:	9e ab       	std	Y+54, r25	; 0x36
    1c7c:	af ab       	std	Y+55, r26	; 0x37
    1c7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c80:	6d a9       	ldd	r22, Y+53	; 0x35
    1c82:	7e a9       	ldd	r23, Y+54	; 0x36
    1c84:	8f a9       	ldd	r24, Y+55	; 0x37
    1c86:	98 ad       	ldd	r25, Y+56	; 0x38
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	4a e7       	ldi	r20, 0x7A	; 122
    1c8e:	53 e4       	ldi	r21, 0x43	; 67
    1c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	89 ab       	std	Y+49, r24	; 0x31
    1c9a:	9a ab       	std	Y+50, r25	; 0x32
    1c9c:	ab ab       	std	Y+51, r26	; 0x33
    1c9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ca0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e8       	ldi	r20, 0x80	; 128
    1cae:	5f e3       	ldi	r21, 0x3F	; 63
    1cb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb4:	88 23       	and	r24, r24
    1cb6:	2c f4       	brge	.+10     	; 0x1cc2 <LCD_displayCharacter+0x49a>
		__ticks = 1;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	98 ab       	std	Y+48, r25	; 0x30
    1cbe:	8f a7       	std	Y+47, r24	; 0x2f
    1cc0:	3f c0       	rjmp	.+126    	; 0x1d40 <LCD_displayCharacter+0x518>
	else if (__tmp > 65535)
    1cc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	3f ef       	ldi	r19, 0xFF	; 255
    1cce:	4f e7       	ldi	r20, 0x7F	; 127
    1cd0:	57 e4       	ldi	r21, 0x47	; 71
    1cd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd6:	18 16       	cp	r1, r24
    1cd8:	4c f5       	brge	.+82     	; 0x1d2c <LCD_displayCharacter+0x504>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cda:	6d a9       	ldd	r22, Y+53	; 0x35
    1cdc:	7e a9       	ldd	r23, Y+54	; 0x36
    1cde:	8f a9       	ldd	r24, Y+55	; 0x37
    1ce0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e2       	ldi	r20, 0x20	; 32
    1ce8:	51 e4       	ldi	r21, 0x41	; 65
    1cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	bc 01       	movw	r22, r24
    1cf4:	cd 01       	movw	r24, r26
    1cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	98 ab       	std	Y+48, r25	; 0x30
    1d00:	8f a7       	std	Y+47, r24	; 0x2f
    1d02:	0f c0       	rjmp	.+30     	; 0x1d22 <LCD_displayCharacter+0x4fa>
    1d04:	89 e1       	ldi	r24, 0x19	; 25
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	9e a7       	std	Y+46, r25	; 0x2e
    1d0a:	8d a7       	std	Y+45, r24	; 0x2d
    1d0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <LCD_displayCharacter+0x4e8>
    1d14:	9e a7       	std	Y+46, r25	; 0x2e
    1d16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	98 ab       	std	Y+48, r25	; 0x30
    1d20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d24:	98 a9       	ldd	r25, Y+48	; 0x30
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	69 f7       	brne	.-38     	; 0x1d04 <LCD_displayCharacter+0x4dc>
    1d2a:	14 c0       	rjmp	.+40     	; 0x1d54 <LCD_displayCharacter+0x52c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d30:	8b a9       	ldd	r24, Y+51	; 0x33
    1d32:	9c a9       	ldd	r25, Y+52	; 0x34
    1d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	98 ab       	std	Y+48, r25	; 0x30
    1d3e:	8f a7       	std	Y+47, r24	; 0x2f
    1d40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d42:	98 a9       	ldd	r25, Y+48	; 0x30
    1d44:	9c a7       	std	Y+44, r25	; 0x2c
    1d46:	8b a7       	std	Y+43, r24	; 0x2b
    1d48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <LCD_displayCharacter+0x524>
    1d50:	9c a7       	std	Y+44, r25	; 0x2c
    1d52:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1d54:	ab e3       	ldi	r26, 0x3B	; 59
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	eb e3       	ldi	r30, 0x3B	; 59
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	84 60       	ori	r24, 0x04	; 4
    1d60:	8c 93       	st	X, r24
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a0 e8       	ldi	r26, 0x80	; 128
    1d68:	bf e3       	ldi	r27, 0x3F	; 63
    1d6a:	8f a3       	std	Y+39, r24	; 0x27
    1d6c:	98 a7       	std	Y+40, r25	; 0x28
    1d6e:	a9 a7       	std	Y+41, r26	; 0x29
    1d70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	6f a1       	ldd	r22, Y+39	; 0x27
    1d74:	78 a5       	ldd	r23, Y+40	; 0x28
    1d76:	89 a5       	ldd	r24, Y+41	; 0x29
    1d78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4a e7       	ldi	r20, 0x7A	; 122
    1d80:	53 e4       	ldi	r21, 0x43	; 67
    1d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	8b a3       	std	Y+35, r24	; 0x23
    1d8c:	9c a3       	std	Y+36, r25	; 0x24
    1d8e:	ad a3       	std	Y+37, r26	; 0x25
    1d90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d92:	6b a1       	ldd	r22, Y+35	; 0x23
    1d94:	7c a1       	ldd	r23, Y+36	; 0x24
    1d96:	8d a1       	ldd	r24, Y+37	; 0x25
    1d98:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <LCD_displayCharacter+0x58c>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9a a3       	std	Y+34, r25	; 0x22
    1db0:	89 a3       	std	Y+33, r24	; 0x21
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <LCD_displayCharacter+0x60a>
	else if (__tmp > 65535)
    1db4:	6b a1       	ldd	r22, Y+35	; 0x23
    1db6:	7c a1       	ldd	r23, Y+36	; 0x24
    1db8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dba:	9e a1       	ldd	r25, Y+38	; 0x26
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	4f e7       	ldi	r20, 0x7F	; 127
    1dc2:	57 e4       	ldi	r21, 0x47	; 71
    1dc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <LCD_displayCharacter+0x5f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	6f a1       	ldd	r22, Y+39	; 0x27
    1dce:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd0:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9a a3       	std	Y+34, r25	; 0x22
    1df2:	89 a3       	std	Y+33, r24	; 0x21
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <LCD_displayCharacter+0x5ec>
    1df6:	89 e1       	ldi	r24, 0x19	; 25
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	98 a3       	std	Y+32, r25	; 0x20
    1dfc:	8f 8f       	std	Y+31, r24	; 0x1f
    1dfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e00:	98 a1       	ldd	r25, Y+32	; 0x20
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCD_displayCharacter+0x5da>
    1e06:	98 a3       	std	Y+32, r25	; 0x20
    1e08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	9a a3       	std	Y+34, r25	; 0x22
    1e12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	89 a1       	ldd	r24, Y+33	; 0x21
    1e16:	9a a1       	ldd	r25, Y+34	; 0x22
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <LCD_displayCharacter+0x5ce>
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <LCD_displayCharacter+0x61e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e20:	7c a1       	ldd	r23, Y+36	; 0x24
    1e22:	8d a1       	ldd	r24, Y+37	; 0x25
    1e24:	9e a1       	ldd	r25, Y+38	; 0x26
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9a a3       	std	Y+34, r25	; 0x22
    1e30:	89 a3       	std	Y+33, r24	; 0x21
    1e32:	89 a1       	ldd	r24, Y+33	; 0x21
    1e34:	9a a1       	ldd	r25, Y+34	; 0x22
    1e36:	9e 8f       	std	Y+30, r25	; 0x1e
    1e38:	8d 8f       	std	Y+29, r24	; 0x1d
    1e3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <LCD_displayCharacter+0x616>
    1e42:	9e 8f       	std	Y+30, r25	; 0x1e
    1e44:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
	LCD_DATA_PORT = (LCD_DATA_PORT & ~((1 << D4) | (1 << D5) | (1 << D6) | (1 << D7))) | ((data & 0x0F)<<(D4));
    1e46:	ab e3       	ldi	r26, 0x3B	; 59
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	eb e3       	ldi	r30, 0x3B	; 59
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	28 2f       	mov	r18, r24
    1e52:	27 78       	andi	r18, 0x87	; 135
    1e54:	fe 01       	movw	r30, r28
    1e56:	ed 59       	subi	r30, 0x9D	; 157
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	80 81       	ld	r24, Z
    1e5c:	88 2f       	mov	r24, r24
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	8f 70       	andi	r24, 0x0F	; 15
    1e62:	90 70       	andi	r25, 0x00	; 0
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	82 2b       	or	r24, r18
    1e72:	8c 93       	st	X, r24
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a0 e8       	ldi	r26, 0x80	; 128
    1e7a:	bf e3       	ldi	r27, 0x3F	; 63
    1e7c:	89 8f       	std	Y+25, r24	; 0x19
    1e7e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e80:	ab 8f       	std	Y+27, r26	; 0x1b
    1e82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e84:	69 8d       	ldd	r22, Y+25	; 0x19
    1e86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	4a e7       	ldi	r20, 0x7A	; 122
    1e92:	53 e4       	ldi	r21, 0x43	; 67
    1e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	8d 8b       	std	Y+21, r24	; 0x15
    1e9e:	9e 8b       	std	Y+22, r25	; 0x16
    1ea0:	af 8b       	std	Y+23, r26	; 0x17
    1ea2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ea4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eaa:	98 8d       	ldd	r25, Y+24	; 0x18
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e8       	ldi	r20, 0x80	; 128
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb8:	88 23       	and	r24, r24
    1eba:	2c f4       	brge	.+10     	; 0x1ec6 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9c 8b       	std	Y+20, r25	; 0x14
    1ec2:	8b 8b       	std	Y+19, r24	; 0x13
    1ec4:	3f c0       	rjmp	.+126    	; 0x1f44 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    1ec6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eca:	8f 89       	ldd	r24, Y+23	; 0x17
    1ecc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	3f ef       	ldi	r19, 0xFF	; 255
    1ed2:	4f e7       	ldi	r20, 0x7F	; 127
    1ed4:	57 e4       	ldi	r21, 0x47	; 71
    1ed6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eda:	18 16       	cp	r1, r24
    1edc:	4c f5       	brge	.+82     	; 0x1f30 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ede:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	9c 8b       	std	Y+20, r25	; 0x14
    1f04:	8b 8b       	std	Y+19, r24	; 0x13
    1f06:	0f c0       	rjmp	.+30     	; 0x1f26 <LCD_displayCharacter+0x6fe>
    1f08:	89 e1       	ldi	r24, 0x19	; 25
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	9a 8b       	std	Y+18, r25	; 0x12
    1f0e:	89 8b       	std	Y+17, r24	; 0x11
    1f10:	89 89       	ldd	r24, Y+17	; 0x11
    1f12:	9a 89       	ldd	r25, Y+18	; 0x12
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <LCD_displayCharacter+0x6ec>
    1f18:	9a 8b       	std	Y+18, r25	; 0x12
    1f1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	9c 8b       	std	Y+20, r25	; 0x14
    1f24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f26:	8b 89       	ldd	r24, Y+19	; 0x13
    1f28:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	69 f7       	brne	.-38     	; 0x1f08 <LCD_displayCharacter+0x6e0>
    1f2e:	14 c0       	rjmp	.+40     	; 0x1f58 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f30:	6d 89       	ldd	r22, Y+21	; 0x15
    1f32:	7e 89       	ldd	r23, Y+22	; 0x16
    1f34:	8f 89       	ldd	r24, Y+23	; 0x17
    1f36:	98 8d       	ldd	r25, Y+24	; 0x18
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9c 8b       	std	Y+20, r25	; 0x14
    1f42:	8b 8b       	std	Y+19, r24	; 0x13
    1f44:	8b 89       	ldd	r24, Y+19	; 0x13
    1f46:	9c 89       	ldd	r25, Y+20	; 0x14
    1f48:	98 8b       	std	Y+16, r25	; 0x10
    1f4a:	8f 87       	std	Y+15, r24	; 0x0f
    1f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f4e:	98 89       	ldd	r25, Y+16	; 0x10
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_displayCharacter+0x728>
    1f54:	98 8b       	std	Y+16, r25	; 0x10
    1f56:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1f58:	ab e3       	ldi	r26, 0x3B	; 59
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	eb e3       	ldi	r30, 0x3B	; 59
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	8b 7f       	andi	r24, 0xFB	; 251
    1f64:	8c 93       	st	X, r24
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	a0 e8       	ldi	r26, 0x80	; 128
    1f6c:	bf e3       	ldi	r27, 0x3F	; 63
    1f6e:	8b 87       	std	Y+11, r24	; 0x0b
    1f70:	9c 87       	std	Y+12, r25	; 0x0c
    1f72:	ad 87       	std	Y+13, r26	; 0x0d
    1f74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	4a e7       	ldi	r20, 0x7A	; 122
    1f84:	53 e4       	ldi	r21, 0x43	; 67
    1f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	8f 83       	std	Y+7, r24	; 0x07
    1f90:	98 87       	std	Y+8, r25	; 0x08
    1f92:	a9 87       	std	Y+9, r26	; 0x09
    1f94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f96:	6f 81       	ldd	r22, Y+7	; 0x07
    1f98:	78 85       	ldd	r23, Y+8	; 0x08
    1f9a:	89 85       	ldd	r24, Y+9	; 0x09
    1f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	40 e8       	ldi	r20, 0x80	; 128
    1fa4:	5f e3       	ldi	r21, 0x3F	; 63
    1fa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1faa:	88 23       	and	r24, r24
    1fac:	2c f4       	brge	.+10     	; 0x1fb8 <LCD_displayCharacter+0x790>
		__ticks = 1;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	3f c0       	rjmp	.+126    	; 0x2036 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    1fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fba:	78 85       	ldd	r23, Y+8	; 0x08
    1fbc:	89 85       	ldd	r24, Y+9	; 0x09
    1fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	3f ef       	ldi	r19, 0xFF	; 255
    1fc4:	4f e7       	ldi	r20, 0x7F	; 127
    1fc6:	57 e4       	ldi	r21, 0x47	; 71
    1fc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fcc:	18 16       	cp	r1, r24
    1fce:	4c f5       	brge	.+82     	; 0x2022 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e2       	ldi	r20, 0x20	; 32
    1fde:	51 e4       	ldi	r21, 0x41	; 65
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9e 83       	std	Y+6, r25	; 0x06
    1ff6:	8d 83       	std	Y+5, r24	; 0x05
    1ff8:	0f c0       	rjmp	.+30     	; 0x2018 <LCD_displayCharacter+0x7f0>
    1ffa:	89 e1       	ldi	r24, 0x19	; 25
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9c 83       	std	Y+4, r25	; 0x04
    2000:	8b 83       	std	Y+3, r24	; 0x03
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	9c 81       	ldd	r25, Y+4	; 0x04
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	f1 f7       	brne	.-4      	; 0x2006 <LCD_displayCharacter+0x7de>
    200a:	9c 83       	std	Y+4, r25	; 0x04
    200c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	9e 81       	ldd	r25, Y+6	; 0x06
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	69 f7       	brne	.-38     	; 0x1ffa <LCD_displayCharacter+0x7d2>
    2020:	14 c0       	rjmp	.+40     	; 0x204a <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2022:	6f 81       	ldd	r22, Y+7	; 0x07
    2024:	78 85       	ldd	r23, Y+8	; 0x08
    2026:	89 85       	ldd	r24, Y+9	; 0x09
    2028:	9a 85       	ldd	r25, Y+10	; 0x0a
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	9e 81       	ldd	r25, Y+6	; 0x06
    203a:	9a 83       	std	Y+2, r25	; 0x02
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9a 81       	ldd	r25, Y+2	; 0x02
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <LCD_displayCharacter+0x81a>
    2046:	9a 83       	std	Y+2, r25	; 0x02
    2048:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    204a:	cd 59       	subi	r28, 0x9D	; 157
    204c:	df 4f       	sbci	r29, 0xFF	; 255
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	1f 91       	pop	r17
    205e:	0f 91       	pop	r16
    2060:	08 95       	ret

00002062 <LCD_displayString>:

/*---------------------------------------------------------------------------------*/

void LCD_displayString(const char *Str)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	00 d0       	rcall	.+0      	; 0x2068 <LCD_displayString+0x6>
    2068:	0f 92       	push	r0
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	9b 83       	std	Y+3, r25	; 0x03
    2070:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2072:	19 82       	std	Y+1, r1	; 0x01
    2074:	0e c0       	rjmp	.+28     	; 0x2092 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	9b 81       	ldd	r25, Y+3	; 0x03
    2080:	fc 01       	movw	r30, r24
    2082:	e2 0f       	add	r30, r18
    2084:	f3 1f       	adc	r31, r19
    2086:	80 81       	ld	r24, Z
    2088:	0e 94 14 0c 	call	0x1828	; 0x1828 <LCD_displayCharacter>
		i++;
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	8f 5f       	subi	r24, 0xFF	; 255
    2090:	89 83       	std	Y+1, r24	; 0x01
/*---------------------------------------------------------------------------------*/

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	9b 81       	ldd	r25, Y+3	; 0x03
    209c:	fc 01       	movw	r30, r24
    209e:	e2 0f       	add	r30, r18
    20a0:	f3 1f       	adc	r31, r19
    20a2:	80 81       	ld	r24, Z
    20a4:	88 23       	and	r24, r24
    20a6:	39 f7       	brne	.-50     	; 0x2076 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <LCD_goToRowColumn>:

/*---------------------------------------------------------------------------------*/

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <LCD_goToRowColumn+0x6>
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <LCD_goToRowColumn+0x8>
    20bc:	0f 92       	push	r0
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	8a 83       	std	Y+2, r24	; 0x02
    20c4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	3d 83       	std	Y+5, r19	; 0x05
    20ce:	2c 83       	std	Y+4, r18	; 0x04
    20d0:	8c 81       	ldd	r24, Y+4	; 0x04
    20d2:	9d 81       	ldd	r25, Y+5	; 0x05
    20d4:	81 30       	cpi	r24, 0x01	; 1
    20d6:	91 05       	cpc	r25, r1
    20d8:	c1 f0       	breq	.+48     	; 0x210a <LCD_goToRowColumn+0x56>
    20da:	2c 81       	ldd	r18, Y+4	; 0x04
    20dc:	3d 81       	ldd	r19, Y+5	; 0x05
    20de:	22 30       	cpi	r18, 0x02	; 2
    20e0:	31 05       	cpc	r19, r1
    20e2:	2c f4       	brge	.+10     	; 0x20ee <LCD_goToRowColumn+0x3a>
    20e4:	8c 81       	ldd	r24, Y+4	; 0x04
    20e6:	9d 81       	ldd	r25, Y+5	; 0x05
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	61 f0       	breq	.+24     	; 0x2104 <LCD_goToRowColumn+0x50>
    20ec:	19 c0       	rjmp	.+50     	; 0x2120 <LCD_goToRowColumn+0x6c>
    20ee:	2c 81       	ldd	r18, Y+4	; 0x04
    20f0:	3d 81       	ldd	r19, Y+5	; 0x05
    20f2:	22 30       	cpi	r18, 0x02	; 2
    20f4:	31 05       	cpc	r19, r1
    20f6:	69 f0       	breq	.+26     	; 0x2112 <LCD_goToRowColumn+0x5e>
    20f8:	8c 81       	ldd	r24, Y+4	; 0x04
    20fa:	9d 81       	ldd	r25, Y+5	; 0x05
    20fc:	83 30       	cpi	r24, 0x03	; 3
    20fe:	91 05       	cpc	r25, r1
    2100:	61 f0       	breq	.+24     	; 0x211a <LCD_goToRowColumn+0x66>
    2102:	0e c0       	rjmp	.+28     	; 0x2120 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	0b c0       	rjmp	.+22     	; 0x2120 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	80 5c       	subi	r24, 0xC0	; 192
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	07 c0       	rjmp	.+14     	; 0x2120 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	80 5f       	subi	r24, 0xF0	; 240
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	03 c0       	rjmp	.+6      	; 0x2120 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	80 5b       	subi	r24, 0xB0	; 176
    211e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	80 68       	ori	r24, 0x80	; 128
    2124:	0e 94 f7 07 	call	0xfee	; 0xfee <LCD_sendCommand>
}
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <LCD_displayStringRowColumn>:

/*---------------------------------------------------------------------------------*/

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	00 d0       	rcall	.+0      	; 0x213e <LCD_displayStringRowColumn+0x6>
    213e:	00 d0       	rcall	.+0      	; 0x2140 <LCD_displayStringRowColumn+0x8>
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	6a 83       	std	Y+2, r22	; 0x02
    2148:	5c 83       	std	Y+4, r21	; 0x04
    214a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	6a 81       	ldd	r22, Y+2	; 0x02
    2150:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	9c 81       	ldd	r25, Y+4	; 0x04
    2158:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_displayString>
}
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <LCD_displayInteger>:

/*---------------------------------------------------------------------------------*/

void LCD_displayInteger(int data)
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	62 97       	sbiw	r28, 0x12	; 18
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	9a 8b       	std	Y+18, r25	; 0x12
    2180:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2182:	89 89       	ldd	r24, Y+17	; 0x11
    2184:	9a 89       	ldd	r25, Y+18	; 0x12
    2186:	9e 01       	movw	r18, r28
    2188:	2f 5f       	subi	r18, 0xFF	; 255
    218a:	3f 4f       	sbci	r19, 0xFF	; 255
    218c:	b9 01       	movw	r22, r18
    218e:	4a e0       	ldi	r20, 0x0A	; 10
    2190:	50 e0       	ldi	r21, 0x00	; 0
    2192:	0e 94 94 11 	call	0x2328	; 0x2328 <itoa>
   LCD_displayString(buff);
    2196:	ce 01       	movw	r24, r28
    2198:	01 96       	adiw	r24, 0x01	; 1
    219a:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_displayString>
}
    219e:	62 96       	adiw	r28, 0x12	; 18
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <LCD_clearScreen>:

/*---------------------------------------------------------------------------------*/

void LCD_clearScreen(void)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	0e 94 f7 07 	call	0xfee	; 0xfee <LCD_sendCommand>
}
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <LCD_shiftDisplayRight>:

/*---------------------------------------------------------------------------------*/

void LCD_shiftDisplayRight(void)
{
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(SHIFT_DISPLAY_RIGHT);
    21cc:	85 e0       	ldi	r24, 0x05	; 5
    21ce:	0e 94 f7 07 	call	0xfee	; 0xfee <LCD_sendCommand>
}
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <LCD_shiftDisplayLeft>:

/*---------------------------------------------------------------------------------*/

void LCD_shiftDisplayLeft(void)
{
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(SHIFT_DISPLAY_LEFT);
    21e0:	87 e0       	ldi	r24, 0x07	; 7
    21e2:	0e 94 f7 07 	call	0xfee	; 0xfee <LCD_sendCommand>
}
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <LCD_shiftCursorRight>:

/*---------------------------------------------------------------------------------*/

void LCD_shiftCursorRight(void)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(SHIFT_CURSOR_RIGHT);
    21f4:	86 e0       	ldi	r24, 0x06	; 6
    21f6:	0e 94 f7 07 	call	0xfee	; 0xfee <LCD_sendCommand>
}
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <LCD_shiftCursorLeft>:

/*---------------------------------------------------------------------------------*/

void LCD_shiftCursorLeft(void)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(SHIFT_CURSOR_LEFT);
    2208:	84 e0       	ldi	r24, 0x04	; 4
    220a:	0e 94 f7 07 	call	0xfee	; 0xfee <LCD_sendCommand>
}
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <LCD_displayOff>:

/*---------------------------------------------------------------------------------*/

void LCD_displayOff(void)
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(DISPLAY_OFF_CURSOR_OFF);
    221c:	88 e0       	ldi	r24, 0x08	; 8
    221e:	0e 94 f7 07 	call	0xfee	; 0xfee <LCD_sendCommand>
}
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <LCD_cursorOff>:

/*---------------------------------------------------------------------------------*/

void LCD_cursorOff(void)
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);
    2230:	8c e0       	ldi	r24, 0x0C	; 12
    2232:	0e 94 f7 07 	call	0xfee	; 0xfee <LCD_sendCommand>
}
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <LCD_cursorOn>:

/*---------------------------------------------------------------------------------*/

void LCD_cursorOn(void)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(DISPLAY_ON_CURSOR_ON);
    2244:	8e e0       	ldi	r24, 0x0E	; 14
    2246:	0e 94 f7 07 	call	0xfee	; 0xfee <LCD_sendCommand>
}
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <LCD_cursorBlink>:

/*---------------------------------------------------------------------------------*/

void LCD_cursorBlink(void)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(DISPLAY_ON_CURSOR_BLINK);
    2258:	8f e0       	ldi	r24, 0x0F	; 15
    225a:	0e 94 f7 07 	call	0xfee	; 0xfee <LCD_sendCommand>
}
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <main>:
void lcd_Reset(void);
/*---------------------------------------------------------------------------------*
 *                                FUNCTION DEFINITIONS                             *
 *---------------------------------------------------------------------------------*/
int main()
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
	/* intializations ---------------------*/
	UART_init();
    226c:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	LCD_init();
    2270:	0e 94 d6 07 	call	0xfac	; 0xfac <LCD_init>
	/* show lcd ---------------------------*/
	lcd_Reset();
    2274:	0e 94 4c 11 	call	0x2298	; 0x2298 <lcd_Reset>
	for(;;)
	{
	/* recieving data----------------------*/
		g_dataBuffer = UART_recieve_Byte();
    2278:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UART_recieve_Byte>
    227c:	80 93 8e 00 	sts	0x008E, r24
	/* display data-----------------------*/
		if('0' == g_dataBuffer)
    2280:	80 91 8e 00 	lds	r24, 0x008E
    2284:	80 33       	cpi	r24, 0x30	; 48
    2286:	19 f4       	brne	.+6      	; 0x228e <main+0x2a>
		{
			lcd_Reset();
    2288:	0e 94 4c 11 	call	0x2298	; 0x2298 <lcd_Reset>
    228c:	f5 cf       	rjmp	.-22     	; 0x2278 <main+0x14>
		}
		else
		{
			LCD_displayCharacter(g_dataBuffer);
    228e:	80 91 8e 00 	lds	r24, 0x008E
    2292:	0e 94 14 0c 	call	0x1828	; 0x1828 <LCD_displayCharacter>
    2296:	f0 cf       	rjmp	.-32     	; 0x2278 <main+0x14>

00002298 <lcd_Reset>:
	}
	return 0;
}

void lcd_Reset()
{
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    22a0:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <LCD_clearScreen>
	LCD_displayString("Enter any char ( 0 for clear screen )");
    22a4:	80 e6       	ldi	r24, 0x60	; 96
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_displayString>
	LCD_goToRowColumn(1, 0);
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_goToRowColumn>
}
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <__prologue_saves__>:
    22ba:	2f 92       	push	r2
    22bc:	3f 92       	push	r3
    22be:	4f 92       	push	r4
    22c0:	5f 92       	push	r5
    22c2:	6f 92       	push	r6
    22c4:	7f 92       	push	r7
    22c6:	8f 92       	push	r8
    22c8:	9f 92       	push	r9
    22ca:	af 92       	push	r10
    22cc:	bf 92       	push	r11
    22ce:	cf 92       	push	r12
    22d0:	df 92       	push	r13
    22d2:	ef 92       	push	r14
    22d4:	ff 92       	push	r15
    22d6:	0f 93       	push	r16
    22d8:	1f 93       	push	r17
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	ca 1b       	sub	r28, r26
    22e4:	db 0b       	sbc	r29, r27
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	09 94       	ijmp

000022f2 <__epilogue_restores__>:
    22f2:	2a 88       	ldd	r2, Y+18	; 0x12
    22f4:	39 88       	ldd	r3, Y+17	; 0x11
    22f6:	48 88       	ldd	r4, Y+16	; 0x10
    22f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    22fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    22fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    22fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2300:	9b 84       	ldd	r9, Y+11	; 0x0b
    2302:	aa 84       	ldd	r10, Y+10	; 0x0a
    2304:	b9 84       	ldd	r11, Y+9	; 0x09
    2306:	c8 84       	ldd	r12, Y+8	; 0x08
    2308:	df 80       	ldd	r13, Y+7	; 0x07
    230a:	ee 80       	ldd	r14, Y+6	; 0x06
    230c:	fd 80       	ldd	r15, Y+5	; 0x05
    230e:	0c 81       	ldd	r16, Y+4	; 0x04
    2310:	1b 81       	ldd	r17, Y+3	; 0x03
    2312:	aa 81       	ldd	r26, Y+2	; 0x02
    2314:	b9 81       	ldd	r27, Y+1	; 0x01
    2316:	ce 0f       	add	r28, r30
    2318:	d1 1d       	adc	r29, r1
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	ed 01       	movw	r28, r26
    2326:	08 95       	ret

00002328 <itoa>:
    2328:	fb 01       	movw	r30, r22
    232a:	9f 01       	movw	r18, r30
    232c:	e8 94       	clt
    232e:	42 30       	cpi	r20, 0x02	; 2
    2330:	c4 f0       	brlt	.+48     	; 0x2362 <itoa+0x3a>
    2332:	45 32       	cpi	r20, 0x25	; 37
    2334:	b4 f4       	brge	.+44     	; 0x2362 <itoa+0x3a>
    2336:	4a 30       	cpi	r20, 0x0A	; 10
    2338:	29 f4       	brne	.+10     	; 0x2344 <itoa+0x1c>
    233a:	97 fb       	bst	r25, 7
    233c:	1e f4       	brtc	.+6      	; 0x2344 <itoa+0x1c>
    233e:	90 95       	com	r25
    2340:	81 95       	neg	r24
    2342:	9f 4f       	sbci	r25, 0xFF	; 255
    2344:	64 2f       	mov	r22, r20
    2346:	77 27       	eor	r23, r23
    2348:	0e 94 c5 11 	call	0x238a	; 0x238a <__udivmodhi4>
    234c:	80 5d       	subi	r24, 0xD0	; 208
    234e:	8a 33       	cpi	r24, 0x3A	; 58
    2350:	0c f0       	brlt	.+2      	; 0x2354 <itoa+0x2c>
    2352:	89 5d       	subi	r24, 0xD9	; 217
    2354:	81 93       	st	Z+, r24
    2356:	cb 01       	movw	r24, r22
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	a1 f7       	brne	.-24     	; 0x2344 <itoa+0x1c>
    235c:	16 f4       	brtc	.+4      	; 0x2362 <itoa+0x3a>
    235e:	5d e2       	ldi	r21, 0x2D	; 45
    2360:	51 93       	st	Z+, r21
    2362:	10 82       	st	Z, r1
    2364:	c9 01       	movw	r24, r18
    2366:	0c 94 b5 11 	jmp	0x236a	; 0x236a <strrev>

0000236a <strrev>:
    236a:	dc 01       	movw	r26, r24
    236c:	fc 01       	movw	r30, r24
    236e:	67 2f       	mov	r22, r23
    2370:	71 91       	ld	r23, Z+
    2372:	77 23       	and	r23, r23
    2374:	e1 f7       	brne	.-8      	; 0x236e <strrev+0x4>
    2376:	32 97       	sbiw	r30, 0x02	; 2
    2378:	04 c0       	rjmp	.+8      	; 0x2382 <strrev+0x18>
    237a:	7c 91       	ld	r23, X
    237c:	6d 93       	st	X+, r22
    237e:	70 83       	st	Z, r23
    2380:	62 91       	ld	r22, -Z
    2382:	ae 17       	cp	r26, r30
    2384:	bf 07       	cpc	r27, r31
    2386:	c8 f3       	brcs	.-14     	; 0x237a <strrev+0x10>
    2388:	08 95       	ret

0000238a <__udivmodhi4>:
    238a:	aa 1b       	sub	r26, r26
    238c:	bb 1b       	sub	r27, r27
    238e:	51 e1       	ldi	r21, 0x11	; 17
    2390:	07 c0       	rjmp	.+14     	; 0x23a0 <__udivmodhi4_ep>

00002392 <__udivmodhi4_loop>:
    2392:	aa 1f       	adc	r26, r26
    2394:	bb 1f       	adc	r27, r27
    2396:	a6 17       	cp	r26, r22
    2398:	b7 07       	cpc	r27, r23
    239a:	10 f0       	brcs	.+4      	; 0x23a0 <__udivmodhi4_ep>
    239c:	a6 1b       	sub	r26, r22
    239e:	b7 0b       	sbc	r27, r23

000023a0 <__udivmodhi4_ep>:
    23a0:	88 1f       	adc	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	5a 95       	dec	r21
    23a6:	a9 f7       	brne	.-22     	; 0x2392 <__udivmodhi4_loop>
    23a8:	80 95       	com	r24
    23aa:	90 95       	com	r25
    23ac:	bc 01       	movw	r22, r24
    23ae:	cd 01       	movw	r24, r26
    23b0:	08 95       	ret

000023b2 <_exit>:
    23b2:	f8 94       	cli

000023b4 <__stop_program>:
    23b4:	ff cf       	rjmp	.-2      	; 0x23b4 <__stop_program>
